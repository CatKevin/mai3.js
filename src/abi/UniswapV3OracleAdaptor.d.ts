/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface UniswapV3OracleAdaptorInterface extends ethers.utils.Interface {
  functions: {
    "collateral()": FunctionFragment;
    "isMarketClosed()": FunctionFragment;
    "isTerminated()": FunctionFragment;
    "longPeriod()": FunctionFragment;
    "path(uint256)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "priceTWAPLong()": FunctionFragment;
    "priceTWAPShort()": FunctionFragment;
    "shortPeriod()": FunctionFragment;
    "underlyingAsset()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketClosed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTerminated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "longPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "path", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "priceTWAPLong",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceTWAPShort",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shortPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMarketClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "longPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "path", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceTWAPLong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceTWAPShort",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shortPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;

  events: {};
}

export class UniswapV3OracleAdaptor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: UniswapV3OracleAdaptorInterface;

  functions: {
    collateral(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "collateral()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isMarketClosed(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isMarketClosed()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isTerminated(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isTerminated()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    longPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "longPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    priceTWAPLong(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "priceTWAPLong()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    priceTWAPShort(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "priceTWAPShort()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    shortPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "shortPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    underlyingAsset(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "underlyingAsset()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  collateral(overrides?: CallOverrides): Promise<string>;

  "collateral()"(overrides?: CallOverrides): Promise<string>;

  isMarketClosed(overrides?: CallOverrides): Promise<boolean>;

  "isMarketClosed()"(overrides?: CallOverrides): Promise<boolean>;

  isTerminated(overrides?: CallOverrides): Promise<boolean>;

  "isTerminated()"(overrides?: CallOverrides): Promise<boolean>;

  longPeriod(overrides?: CallOverrides): Promise<number>;

  "longPeriod()"(overrides?: CallOverrides): Promise<number>;

  path(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "path(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "pools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  priceTWAPLong(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "priceTWAPLong()"(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  priceTWAPShort(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "priceTWAPShort()"(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  shortPeriod(overrides?: CallOverrides): Promise<number>;

  "shortPeriod()"(overrides?: CallOverrides): Promise<number>;

  underlyingAsset(overrides?: CallOverrides): Promise<string>;

  "underlyingAsset()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    collateral(overrides?: CallOverrides): Promise<string>;

    "collateral()"(overrides?: CallOverrides): Promise<string>;

    isMarketClosed(overrides?: CallOverrides): Promise<boolean>;

    "isMarketClosed()"(overrides?: CallOverrides): Promise<boolean>;

    isTerminated(overrides?: CallOverrides): Promise<boolean>;

    "isTerminated()"(overrides?: CallOverrides): Promise<boolean>;

    longPeriod(overrides?: CallOverrides): Promise<number>;

    "longPeriod()"(overrides?: CallOverrides): Promise<number>;

    path(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    priceTWAPLong(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "priceTWAPLong()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    priceTWAPShort(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "priceTWAPShort()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    shortPeriod(overrides?: CallOverrides): Promise<number>;

    "shortPeriod()"(overrides?: CallOverrides): Promise<number>;

    underlyingAsset(overrides?: CallOverrides): Promise<string>;

    "underlyingAsset()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    "collateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    isMarketClosed(overrides?: CallOverrides): Promise<BigNumber>;

    "isMarketClosed()"(overrides?: CallOverrides): Promise<BigNumber>;

    isTerminated(overrides?: CallOverrides): Promise<BigNumber>;

    "isTerminated()"(overrides?: CallOverrides): Promise<BigNumber>;

    longPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "longPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    path(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceTWAPLong(overrides?: CallOverrides): Promise<BigNumber>;

    "priceTWAPLong()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceTWAPShort(overrides?: CallOverrides): Promise<BigNumber>;

    "priceTWAPShort()"(overrides?: CallOverrides): Promise<BigNumber>;

    shortPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "shortPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingAsset()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "collateral()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isMarketClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isMarketClosed()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTerminated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isTerminated()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    longPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "longPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    path(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "path(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceTWAPLong(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceTWAPLong()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceTWAPShort(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceTWAPShort()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shortPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shortPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
