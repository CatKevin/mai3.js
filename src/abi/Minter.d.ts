/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MinterInterface extends ethers.utils.Interface {
  functions: {
    "DEV_COMMISSION_RATE()": FunctionFragment;
    "GENESIS_BLOCK()": FunctionFragment;
    "TOTAL_SUPPLY()": FunctionFragment;
    "devAccount()": FunctionFragment;
    "extraMintableAmount()": FunctionFragment;
    "getMintableAmountToSeriesA()": FunctionFragment;
    "getMintableAmountToVault()": FunctionFragment;
    "lastCaptureValue()": FunctionFragment;
    "mcbToken()": FunctionFragment;
    "mintToSeriesA(uint256)": FunctionFragment;
    "mintToVault(uint256)": FunctionFragment;
    "setDevAccount(address)": FunctionFragment;
    "toSeriesA()": FunctionFragment;
    "toVault()": FunctionFragment;
    "totalCapturedValue()": FunctionFragment;
    "valueCapture()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEV_COMMISSION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GENESIS_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extraMintableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintableAmountToSeriesA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintableAmountToVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCaptureValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mcbToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintToSeriesA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintToVault",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAccount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "toSeriesA", values?: undefined): string;
  encodeFunctionData(functionFragment: "toVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalCapturedValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueCapture",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEV_COMMISSION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GENESIS_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extraMintableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintableAmountToSeriesA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintableAmountToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCaptureValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mcbToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintToSeriesA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toSeriesA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCapturedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueCapture",
    data: BytesLike
  ): Result;

  events: {
    "MintMCB(address,uint256,uint256,uint256)": EventFragment;
    "SetDevAccount(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintMCB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDevAccount"): EventFragment;
}

export class Minter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MinterInterface;

  functions: {
    DEV_COMMISSION_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "DEV_COMMISSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    GENESIS_BLOCK(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "GENESIS_BLOCK()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    TOTAL_SUPPLY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "TOTAL_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    devAccount(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "devAccount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    extraMintableAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "extraMintableAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMintableAmountToSeriesA(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getMintableAmountToSeriesA()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getMintableAmountToVault(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getMintableAmountToVault()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastCaptureValue(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastCaptureValue()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mcbToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "mcbToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    mintToSeriesA(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintToSeriesA(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintToVault(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintToVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDevAccount(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevAccount(address)"(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    toSeriesA(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      releaseRate: BigNumber;
      mintableAmount: BigNumber;
      mintedAmount: BigNumber;
      maxSupply: BigNumber;
      lastCapturedBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "toSeriesA()"(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      releaseRate: BigNumber;
      mintableAmount: BigNumber;
      mintedAmount: BigNumber;
      maxSupply: BigNumber;
      lastCapturedBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    toVault(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      releaseRate: BigNumber;
      mintableAmount: BigNumber;
      mintedAmount: BigNumber;
      maxSupply: BigNumber;
      lastCapturedBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "toVault()"(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      releaseRate: BigNumber;
      mintableAmount: BigNumber;
      mintedAmount: BigNumber;
      maxSupply: BigNumber;
      lastCapturedBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    totalCapturedValue(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalCapturedValue()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    valueCapture(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "valueCapture()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  DEV_COMMISSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "DEV_COMMISSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  GENESIS_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  "GENESIS_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "TOTAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  devAccount(overrides?: CallOverrides): Promise<string>;

  "devAccount()"(overrides?: CallOverrides): Promise<string>;

  extraMintableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "extraMintableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMintableAmountToSeriesA(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getMintableAmountToSeriesA()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getMintableAmountToVault(overrides?: Overrides): Promise<ContractTransaction>;

  "getMintableAmountToVault()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastCaptureValue(overrides?: CallOverrides): Promise<BigNumber>;

  "lastCaptureValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  mcbToken(overrides?: CallOverrides): Promise<string>;

  "mcbToken()"(overrides?: CallOverrides): Promise<string>;

  mintToSeriesA(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintToSeriesA(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintToVault(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintToVault(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDevAccount(
    devAccount_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevAccount(address)"(
    devAccount_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  toSeriesA(
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    releaseRate: BigNumber;
    mintableAmount: BigNumber;
    mintedAmount: BigNumber;
    maxSupply: BigNumber;
    lastCapturedBlock: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "toSeriesA()"(
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    releaseRate: BigNumber;
    mintableAmount: BigNumber;
    mintedAmount: BigNumber;
    maxSupply: BigNumber;
    lastCapturedBlock: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  toVault(
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    releaseRate: BigNumber;
    mintableAmount: BigNumber;
    mintedAmount: BigNumber;
    maxSupply: BigNumber;
    lastCapturedBlock: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "toVault()"(
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    releaseRate: BigNumber;
    mintableAmount: BigNumber;
    mintedAmount: BigNumber;
    maxSupply: BigNumber;
    lastCapturedBlock: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  totalCapturedValue(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCapturedValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  valueCapture(overrides?: CallOverrides): Promise<string>;

  "valueCapture()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEV_COMMISSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEV_COMMISSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "GENESIS_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "TOTAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    devAccount(overrides?: CallOverrides): Promise<string>;

    "devAccount()"(overrides?: CallOverrides): Promise<string>;

    extraMintableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "extraMintableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMintableAmountToSeriesA(overrides?: CallOverrides): Promise<BigNumber>;

    "getMintableAmountToSeriesA()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMintableAmountToVault(overrides?: CallOverrides): Promise<BigNumber>;

    "getMintableAmountToVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastCaptureValue(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCaptureValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    mcbToken(overrides?: CallOverrides): Promise<string>;

    "mcbToken()"(overrides?: CallOverrides): Promise<string>;

    mintToSeriesA(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintToSeriesA(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintToVault(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "mintToVault(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevAccount(
      devAccount_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevAccount(address)"(
      devAccount_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    toSeriesA(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      releaseRate: BigNumber;
      mintableAmount: BigNumber;
      mintedAmount: BigNumber;
      maxSupply: BigNumber;
      lastCapturedBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "toSeriesA()"(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      releaseRate: BigNumber;
      mintableAmount: BigNumber;
      mintedAmount: BigNumber;
      maxSupply: BigNumber;
      lastCapturedBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    toVault(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      releaseRate: BigNumber;
      mintableAmount: BigNumber;
      mintedAmount: BigNumber;
      maxSupply: BigNumber;
      lastCapturedBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "toVault()"(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      releaseRate: BigNumber;
      mintableAmount: BigNumber;
      mintedAmount: BigNumber;
      maxSupply: BigNumber;
      lastCapturedBlock: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    totalCapturedValue(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCapturedValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueCapture(overrides?: CallOverrides): Promise<string>;

    "valueCapture()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    MintMCB(
      recipient: string | null,
      amount: null,
      recipientReceivedAmount: null,
      devReceivedAmount: null
    ): EventFilter;

    SetDevAccount(devOld: string | null, devNew: string | null): EventFilter;
  };

  estimateGas: {
    DEV_COMMISSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEV_COMMISSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    GENESIS_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    "GENESIS_BLOCK()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "TOTAL_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    devAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "devAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    extraMintableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "extraMintableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMintableAmountToSeriesA(overrides?: Overrides): Promise<BigNumber>;

    "getMintableAmountToSeriesA()"(overrides?: Overrides): Promise<BigNumber>;

    getMintableAmountToVault(overrides?: Overrides): Promise<BigNumber>;

    "getMintableAmountToVault()"(overrides?: Overrides): Promise<BigNumber>;

    lastCaptureValue(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCaptureValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    mcbToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mcbToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintToSeriesA(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintToSeriesA(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintToVault(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintToVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDevAccount(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevAccount(address)"(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    toSeriesA(overrides?: CallOverrides): Promise<BigNumber>;

    "toSeriesA()"(overrides?: CallOverrides): Promise<BigNumber>;

    toVault(overrides?: CallOverrides): Promise<BigNumber>;

    "toVault()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalCapturedValue(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCapturedValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueCapture(overrides?: CallOverrides): Promise<BigNumber>;

    "valueCapture()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEV_COMMISSION_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEV_COMMISSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GENESIS_BLOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GENESIS_BLOCK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TOTAL_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOTAL_SUPPLY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devAccount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraMintableAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extraMintableAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintableAmountToSeriesA(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getMintableAmountToSeriesA()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getMintableAmountToVault(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getMintableAmountToVault()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastCaptureValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastCaptureValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mcbToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mcbToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintToSeriesA(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintToSeriesA(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintToVault(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintToVault(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDevAccount(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevAccount(address)"(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    toSeriesA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "toSeriesA()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "toVault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCapturedValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalCapturedValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueCapture(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "valueCapture()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
