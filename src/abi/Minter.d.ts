/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MinterInterface extends ethers.utils.Interface {
  functions: {
    "beginTime()": FunctionFragment;
    "dailySupplyLimit()": FunctionFragment;
    "devAccount()": FunctionFragment;
    "devShareRate()": FunctionFragment;
    "mcbToken()": FunctionFragment;
    "mintMCBToken(address,uint256)": FunctionFragment;
    "mintableMCBToken()": FunctionFragment;
    "mintableMCBTokenByTime()": FunctionFragment;
    "mintableMCBTokenByValue()": FunctionFragment;
    "mintedAmount()": FunctionFragment;
    "setDevAccount(address)": FunctionFragment;
    "totalSupplyLimit()": FunctionFragment;
    "valueCapture()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "beginTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dailySupplyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "devShareRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mcbToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintMCBToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintableMCBToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintableMCBTokenByTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintableMCBTokenByValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "valueCapture",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "beginTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailySupplyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "devShareRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mcbToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintMCBToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintableMCBToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintableMCBTokenByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintableMCBTokenByValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueCapture",
    data: BytesLike
  ): Result;

  events: {
    "MintMCB(address,uint256,uint256,uint256)": EventFragment;
    "SetDevAccount(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintMCB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDevAccount"): EventFragment;
}

export class Minter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MinterInterface;

  functions: {
    beginTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "beginTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    dailySupplyLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "dailySupplyLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    devAccount(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "devAccount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    devShareRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "devShareRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mcbToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "mcbToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    mintMCBToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintMCBToken(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintableMCBToken(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mintableMCBToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mintableMCBTokenByTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mintableMCBTokenByTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mintableMCBTokenByValue(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mintableMCBTokenByValue()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mintedAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mintedAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setDevAccount(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevAccount(address)"(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupplyLimit(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupplyLimit()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    valueCapture(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "valueCapture()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  beginTime(overrides?: CallOverrides): Promise<BigNumber>;

  "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  dailySupplyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "dailySupplyLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  devAccount(overrides?: CallOverrides): Promise<string>;

  "devAccount()"(overrides?: CallOverrides): Promise<string>;

  devShareRate(overrides?: CallOverrides): Promise<BigNumber>;

  "devShareRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  mcbToken(overrides?: CallOverrides): Promise<string>;

  "mcbToken()"(overrides?: CallOverrides): Promise<string>;

  mintMCBToken(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintMCBToken(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintableMCBToken(overrides?: CallOverrides): Promise<BigNumber>;

  "mintableMCBToken()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintableMCBTokenByTime(overrides?: CallOverrides): Promise<BigNumber>;

  "mintableMCBTokenByTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintableMCBTokenByValue(overrides?: CallOverrides): Promise<BigNumber>;

  "mintableMCBTokenByValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "mintedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  setDevAccount(
    devAccount_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevAccount(address)"(
    devAccount_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupplyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupplyLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

  valueCapture(overrides?: CallOverrides): Promise<string>;

  "valueCapture()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    beginTime(overrides?: CallOverrides): Promise<BigNumber>;

    "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    dailySupplyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "dailySupplyLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    devAccount(overrides?: CallOverrides): Promise<string>;

    "devAccount()"(overrides?: CallOverrides): Promise<string>;

    devShareRate(overrides?: CallOverrides): Promise<BigNumber>;

    "devShareRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    mcbToken(overrides?: CallOverrides): Promise<string>;

    "mcbToken()"(overrides?: CallOverrides): Promise<string>;

    mintMCBToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintMCBToken(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintableMCBToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mintableMCBToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintableMCBTokenByTime(overrides?: CallOverrides): Promise<BigNumber>;

    "mintableMCBTokenByTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintableMCBTokenByValue(overrides?: CallOverrides): Promise<BigNumber>;

    "mintableMCBTokenByValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDevAccount(
      devAccount_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevAccount(address)"(
      devAccount_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupplyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupplyLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueCapture(overrides?: CallOverrides): Promise<string>;

    "valueCapture()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    MintMCB(
      recipient: string | null,
      amount: null,
      recipientReceivedAmount: null,
      devReceivedAmount: null
    ): EventFilter;

    SetDevAccount(devOld: string | null, devNew: string | null): EventFilter;
  };

  estimateGas: {
    beginTime(overrides?: CallOverrides): Promise<BigNumber>;

    "beginTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    dailySupplyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "dailySupplyLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    devAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "devAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    devShareRate(overrides?: CallOverrides): Promise<BigNumber>;

    "devShareRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    mcbToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mcbToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintMCBToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintMCBToken(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintableMCBToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mintableMCBToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintableMCBTokenByTime(overrides?: CallOverrides): Promise<BigNumber>;

    "mintableMCBTokenByTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintableMCBTokenByValue(overrides?: CallOverrides): Promise<BigNumber>;

    "mintableMCBTokenByValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "mintedAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDevAccount(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevAccount(address)"(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupplyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupplyLimit()"(overrides?: CallOverrides): Promise<BigNumber>;

    valueCapture(overrides?: CallOverrides): Promise<BigNumber>;

    "valueCapture()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    beginTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beginTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dailySupplyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dailySupplyLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    devAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devAccount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devShareRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devShareRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mcbToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mcbToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintMCBToken(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintMCBToken(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintableMCBToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintableMCBToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintableMCBTokenByTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintableMCBTokenByTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintableMCBTokenByValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mintableMCBTokenByValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintedAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDevAccount(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevAccount(address)"(
      devAccount_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupplyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupplyLimit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valueCapture(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "valueCapture()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
