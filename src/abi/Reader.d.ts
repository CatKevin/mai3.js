/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ReaderInterface extends ethers.utils.Interface {
  functions: {
    "getAccountStorage(address,uint256,address)": FunctionFragment;
    "getAccountsInfo(address,uint256,uint256,uint256)": FunctionFragment;
    "getLiquidityPoolStorage(address)": FunctionFragment;
    "getPoolMargin(address)": FunctionFragment;
    "inverseStateService()": FunctionFragment;
    "isAMMMaintenanceSafe(address)": FunctionFragment;
    "queryAddLiquidity(address,int256,int256)": FunctionFragment;
    "queryRemoveLiquidity(address,int256,int256)": FunctionFragment;
    "queryTrade(address,uint256,address,int256,address,uint32)": FunctionFragment;
    "readIndexPrices(address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountStorage",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountsInfo",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPoolStorage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolMargin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "inverseStateService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAMMMaintenanceSafe",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "queryAddLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryRemoveLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queryTrade",
    values: [string, BigNumberish, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readIndexPrices",
    values: [string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPoolStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inverseStateService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAMMMaintenanceSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queryRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "readIndexPrices",
    data: BytesLike
  ): Result;

  events: {};
}

export class Reader extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ReaderInterface;

  functions: {
    getAccountStorage(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getAccountStorage(address,uint256,address)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAccountsInfo(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getAccountsInfo(address,uint256,uint256,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLiquidityPoolStorage(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getLiquidityPoolStorage(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPoolMargin(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getPoolMargin(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    inverseStateService(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "inverseStateService()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isAMMMaintenanceSafe(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isAMMMaintenanceSafe(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queryAddLiquidity(
      liquidityPool: string,
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queryAddLiquidity(address,int256,int256)"(
      liquidityPool: string,
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queryRemoveLiquidity(
      liquidityPool: string,
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queryRemoveLiquidity(address,int256,int256)"(
      liquidityPool: string,
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queryTrade(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queryTrade(address,uint256,address,int256,address,uint32)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    readIndexPrices(
      oracles: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "readIndexPrices(address[])"(
      oracles: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAccountStorage(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getAccountStorage(address,uint256,address)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAccountsInfo(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getAccountsInfo(address,uint256,uint256,uint256)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLiquidityPoolStorage(
    liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getLiquidityPoolStorage(address)"(
    liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPoolMargin(
    liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getPoolMargin(address)"(
    liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  inverseStateService(overrides?: CallOverrides): Promise<string>;

  "inverseStateService()"(overrides?: CallOverrides): Promise<string>;

  isAMMMaintenanceSafe(
    liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "isAMMMaintenanceSafe(address)"(
    liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queryAddLiquidity(
    liquidityPool: string,
    cashToAdd: BigNumberish,
    shareToMint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queryAddLiquidity(address,int256,int256)"(
    liquidityPool: string,
    cashToAdd: BigNumberish,
    shareToMint: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queryRemoveLiquidity(
    liquidityPool: string,
    shareToRemove: BigNumberish,
    cashToReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queryRemoveLiquidity(address,int256,int256)"(
    liquidityPool: string,
    shareToRemove: BigNumberish,
    cashToReturn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queryTrade(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    referrer: string,
    flags: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queryTrade(address,uint256,address,int256,address,uint32)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    referrer: string,
    flags: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  readIndexPrices(
    oracles: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "readIndexPrices(address[])"(
    oracles: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountStorage(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      accountStorage: {
        cash: BigNumber;
        position: BigNumber;
        availableMargin: BigNumber;
        margin: BigNumber;
        settleableMargin: BigNumber;
        isInitialMarginSafe: boolean;
        isMaintenanceMarginSafe: boolean;
        isMarginSafe: boolean;
        targetLeverage: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: boolean;
        7: boolean;
        8: BigNumber;
      };
      0: boolean;
      1: {
        cash: BigNumber;
        position: BigNumber;
        availableMargin: BigNumber;
        margin: BigNumber;
        settleableMargin: BigNumber;
        isInitialMarginSafe: boolean;
        isMaintenanceMarginSafe: boolean;
        isMarginSafe: boolean;
        targetLeverage: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: boolean;
        7: boolean;
        8: BigNumber;
      };
    }>;

    "getAccountStorage(address,uint256,address)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      accountStorage: {
        cash: BigNumber;
        position: BigNumber;
        availableMargin: BigNumber;
        margin: BigNumber;
        settleableMargin: BigNumber;
        isInitialMarginSafe: boolean;
        isMaintenanceMarginSafe: boolean;
        isMarginSafe: boolean;
        targetLeverage: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: boolean;
        7: boolean;
        8: BigNumber;
      };
      0: boolean;
      1: {
        cash: BigNumber;
        position: BigNumber;
        availableMargin: BigNumber;
        margin: BigNumber;
        settleableMargin: BigNumber;
        isInitialMarginSafe: boolean;
        isMaintenanceMarginSafe: boolean;
        isMarginSafe: boolean;
        targetLeverage: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
        3: BigNumber;
        4: BigNumber;
        5: boolean;
        6: boolean;
        7: boolean;
        8: BigNumber;
      };
    }>;

    getAccountsInfo(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      result: {
        account: string;
        position: BigNumber;
        margin: BigNumber;
        isSafe: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: boolean;
      }[];
      0: boolean;
      1: {
        account: string;
        position: BigNumber;
        margin: BigNumber;
        isSafe: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: boolean;
      }[];
    }>;

    "getAccountsInfo(address,uint256,uint256,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      result: {
        account: string;
        position: BigNumber;
        margin: BigNumber;
        isSafe: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: boolean;
      }[];
      0: boolean;
      1: {
        account: string;
        position: BigNumber;
        margin: BigNumber;
        isSafe: boolean;
        0: string;
        1: BigNumber;
        2: BigNumber;
        3: boolean;
      }[];
    }>;

    getLiquidityPoolStorage(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      pool: {
        isRunning: boolean;
        isFastCreationEnabled: boolean;
        addresses: [string, string, string, string, string, string, string];
        intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        uintNums: [BigNumber, BigNumber, BigNumber, BigNumber];
        perpetuals: {
          state: number;
          oracle: string;
          nums: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          symbol: BigNumber;
          underlyingAsset: string;
          isMarketClosed: boolean;
          isTerminated: boolean;
          ammCashBalance: BigNumber;
          ammPositionAmount: BigNumber;
          isInversePerpetual: boolean;
          0: number;
          1: string;
          2: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          3: BigNumber;
          4: string;
          5: boolean;
          6: boolean;
          7: BigNumber;
          8: BigNumber;
          9: boolean;
        }[];
        isAMMMaintenanceSafe: boolean;
        0: boolean;
        1: boolean;
        2: [string, string, string, string, string, string, string];
        3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        4: [BigNumber, BigNumber, BigNumber, BigNumber];
        5: {
          state: number;
          oracle: string;
          nums: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          symbol: BigNumber;
          underlyingAsset: string;
          isMarketClosed: boolean;
          isTerminated: boolean;
          ammCashBalance: BigNumber;
          ammPositionAmount: BigNumber;
          isInversePerpetual: boolean;
          0: number;
          1: string;
          2: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          3: BigNumber;
          4: string;
          5: boolean;
          6: boolean;
          7: BigNumber;
          8: BigNumber;
          9: boolean;
        }[];
        6: boolean;
      };
      0: boolean;
      1: {
        isRunning: boolean;
        isFastCreationEnabled: boolean;
        addresses: [string, string, string, string, string, string, string];
        intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        uintNums: [BigNumber, BigNumber, BigNumber, BigNumber];
        perpetuals: {
          state: number;
          oracle: string;
          nums: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          symbol: BigNumber;
          underlyingAsset: string;
          isMarketClosed: boolean;
          isTerminated: boolean;
          ammCashBalance: BigNumber;
          ammPositionAmount: BigNumber;
          isInversePerpetual: boolean;
          0: number;
          1: string;
          2: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          3: BigNumber;
          4: string;
          5: boolean;
          6: boolean;
          7: BigNumber;
          8: BigNumber;
          9: boolean;
        }[];
        isAMMMaintenanceSafe: boolean;
        0: boolean;
        1: boolean;
        2: [string, string, string, string, string, string, string];
        3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        4: [BigNumber, BigNumber, BigNumber, BigNumber];
        5: {
          state: number;
          oracle: string;
          nums: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          symbol: BigNumber;
          underlyingAsset: string;
          isMarketClosed: boolean;
          isTerminated: boolean;
          ammCashBalance: BigNumber;
          ammPositionAmount: BigNumber;
          isInversePerpetual: boolean;
          0: number;
          1: string;
          2: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          3: BigNumber;
          4: string;
          5: boolean;
          6: boolean;
          7: BigNumber;
          8: BigNumber;
          9: boolean;
        }[];
        6: boolean;
      };
    }>;

    "getLiquidityPoolStorage(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      pool: {
        isRunning: boolean;
        isFastCreationEnabled: boolean;
        addresses: [string, string, string, string, string, string, string];
        intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        uintNums: [BigNumber, BigNumber, BigNumber, BigNumber];
        perpetuals: {
          state: number;
          oracle: string;
          nums: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          symbol: BigNumber;
          underlyingAsset: string;
          isMarketClosed: boolean;
          isTerminated: boolean;
          ammCashBalance: BigNumber;
          ammPositionAmount: BigNumber;
          isInversePerpetual: boolean;
          0: number;
          1: string;
          2: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          3: BigNumber;
          4: string;
          5: boolean;
          6: boolean;
          7: BigNumber;
          8: BigNumber;
          9: boolean;
        }[];
        isAMMMaintenanceSafe: boolean;
        0: boolean;
        1: boolean;
        2: [string, string, string, string, string, string, string];
        3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        4: [BigNumber, BigNumber, BigNumber, BigNumber];
        5: {
          state: number;
          oracle: string;
          nums: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          symbol: BigNumber;
          underlyingAsset: string;
          isMarketClosed: boolean;
          isTerminated: boolean;
          ammCashBalance: BigNumber;
          ammPositionAmount: BigNumber;
          isInversePerpetual: boolean;
          0: number;
          1: string;
          2: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          3: BigNumber;
          4: string;
          5: boolean;
          6: boolean;
          7: BigNumber;
          8: BigNumber;
          9: boolean;
        }[];
        6: boolean;
      };
      0: boolean;
      1: {
        isRunning: boolean;
        isFastCreationEnabled: boolean;
        addresses: [string, string, string, string, string, string, string];
        intNums: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        uintNums: [BigNumber, BigNumber, BigNumber, BigNumber];
        perpetuals: {
          state: number;
          oracle: string;
          nums: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          symbol: BigNumber;
          underlyingAsset: string;
          isMarketClosed: boolean;
          isTerminated: boolean;
          ammCashBalance: BigNumber;
          ammPositionAmount: BigNumber;
          isInversePerpetual: boolean;
          0: number;
          1: string;
          2: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          3: BigNumber;
          4: string;
          5: boolean;
          6: boolean;
          7: BigNumber;
          8: BigNumber;
          9: boolean;
        }[];
        isAMMMaintenanceSafe: boolean;
        0: boolean;
        1: boolean;
        2: [string, string, string, string, string, string, string];
        3: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
        4: [BigNumber, BigNumber, BigNumber, BigNumber];
        5: {
          state: number;
          oracle: string;
          nums: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          symbol: BigNumber;
          underlyingAsset: string;
          isMarketClosed: boolean;
          isTerminated: boolean;
          ammCashBalance: BigNumber;
          ammPositionAmount: BigNumber;
          isInversePerpetual: boolean;
          0: number;
          1: string;
          2: [
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber
          ];
          3: BigNumber;
          4: string;
          5: boolean;
          6: boolean;
          7: BigNumber;
          8: BigNumber;
          9: boolean;
        }[];
        6: boolean;
      };
    }>;

    getPoolMargin(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      poolMargin: BigNumber;
      isSafe: boolean;
      0: boolean;
      1: BigNumber;
      2: boolean;
    }>;

    "getPoolMargin(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      poolMargin: BigNumber;
      isSafe: boolean;
      0: boolean;
      1: BigNumber;
      2: boolean;
    }>;

    inverseStateService(overrides?: CallOverrides): Promise<string>;

    "inverseStateService()"(overrides?: CallOverrides): Promise<string>;

    isAMMMaintenanceSafe(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAMMMaintenanceSafe(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queryAddLiquidity(
      liquidityPool: string,
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      cashToAddResult: BigNumber;
      shareToMintResult: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    "queryAddLiquidity(address,int256,int256)"(
      liquidityPool: string,
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      cashToAddResult: BigNumber;
      shareToMintResult: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    queryRemoveLiquidity(
      liquidityPool: string,
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      shareToRemoveResult: BigNumber;
      cashToReturnResult: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    "queryRemoveLiquidity(address,int256,int256)"(
      liquidityPool: string,
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      shareToRemoveResult: BigNumber;
      cashToReturnResult: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
    }>;

    queryTrade(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      tradePrice: BigNumber;
      totalFee: BigNumber;
      cost: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    "queryTrade(address,uint256,address,int256,address,uint32)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      isSynced: boolean;
      tradePrice: BigNumber;
      totalFee: BigNumber;
      cost: BigNumber;
      0: boolean;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    readIndexPrices(
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<{
      isSuccess: boolean[];
      indexPrices: BigNumber[];
      0: boolean[];
      1: BigNumber[];
    }>;

    "readIndexPrices(address[])"(
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<{
      isSuccess: boolean[];
      indexPrices: BigNumber[];
      0: boolean[];
      1: BigNumber[];
    }>;
  };

  filters: {};

  estimateGas: {
    getAccountStorage(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getAccountStorage(address,uint256,address)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAccountsInfo(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getAccountsInfo(address,uint256,uint256,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLiquidityPoolStorage(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getLiquidityPoolStorage(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPoolMargin(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getPoolMargin(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    inverseStateService(overrides?: CallOverrides): Promise<BigNumber>;

    "inverseStateService()"(overrides?: CallOverrides): Promise<BigNumber>;

    isAMMMaintenanceSafe(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "isAMMMaintenanceSafe(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queryAddLiquidity(
      liquidityPool: string,
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queryAddLiquidity(address,int256,int256)"(
      liquidityPool: string,
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queryRemoveLiquidity(
      liquidityPool: string,
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queryRemoveLiquidity(address,int256,int256)"(
      liquidityPool: string,
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queryTrade(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "queryTrade(address,uint256,address,int256,address,uint32)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    readIndexPrices(
      oracles: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "readIndexPrices(address[])"(
      oracles: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountStorage(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getAccountStorage(address,uint256,address)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAccountsInfo(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getAccountsInfo(address,uint256,uint256,uint256)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPoolStorage(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityPoolStorage(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPoolMargin(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getPoolMargin(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    inverseStateService(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "inverseStateService()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAMMMaintenanceSafe(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isAMMMaintenanceSafe(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queryAddLiquidity(
      liquidityPool: string,
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queryAddLiquidity(address,int256,int256)"(
      liquidityPool: string,
      cashToAdd: BigNumberish,
      shareToMint: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queryRemoveLiquidity(
      liquidityPool: string,
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queryRemoveLiquidity(address,int256,int256)"(
      liquidityPool: string,
      shareToRemove: BigNumberish,
      cashToReturn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queryTrade(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queryTrade(address,uint256,address,int256,address,uint32)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      referrer: string,
      flags: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    readIndexPrices(
      oracles: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "readIndexPrices(address[])"(
      oracles: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
