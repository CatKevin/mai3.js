/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ValueCaptureInterface extends ethers.utils.Interface {
  functions: {
    "collectToken(address)": FunctionFragment;
    "getAllUSDTokens()": FunctionFragment;
    "getUSDToken(uint256)": FunctionFragment;
    "getUSDTokenCount()": FunctionFragment;
    "getUSDTokenInfo(address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendERC20(address,address,uint256)": FunctionFragment;
    "sendERC721(address,address,uint256)": FunctionFragment;
    "sendNativeToken(address,uint256)": FunctionFragment;
    "setGuardian(address)": FunctionFragment;
    "setUSDConverter(address,address)": FunctionFragment;
    "setUSDToken(address,uint256)": FunctionFragment;
    "totalCapturedUSD()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unsetUSDToken(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collectToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUSDTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDTokenInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC721",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendNativeToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGuardian", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUSDConverter",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCapturedUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsetUSDToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "collectToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUSDTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendERC721", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendNativeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDConverter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCapturedUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsetUSDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "AddUSDToken(address)": EventFragment;
    "ConvertToUSD(address,uint256,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveUSDToken(address)": EventFragment;
    "SetGuardian(address,address)": EventFragment;
    "SetUSDConverter(address,address)": EventFragment;
    "TranferToVault(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddUSDToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertToUSD"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveUSDToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUSDConverter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TranferToVault"): EventFragment;
}

export class ValueCapture extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValueCaptureInterface;

  functions: {
    collectToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAllUSDTokens(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getAllUSDTokens()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    getUSDToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getUSDToken(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getUSDTokenCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getUSDTokenCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getUSDTokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
    }>;

    "getUSDTokenInfo(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
    }>;

    guardian(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "guardian()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialize(
      vault_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      vault_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sendERC20(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendERC20(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendERC721(
      token: string,
      to: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendERC721(address,address,uint256)"(
      token: string,
      to: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sendNativeToken(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sendNativeToken(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGuardian(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGuardian(address)"(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUSDConverter(
      token: string,
      converter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUSDConverter(address,address)"(
      token: string,
      converter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUSDToken(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUSDToken(address,uint256)"(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalCapturedUSD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalCapturedUSD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unsetUSDToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsetUSDToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  collectToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAllUSDTokens(overrides?: CallOverrides): Promise<string[]>;

  "getAllUSDTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getUSDToken(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getUSDToken(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUSDTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getUSDTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUSDTokenInfo(
    token: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: string;
  }>;

  "getUSDTokenInfo(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: string;
  }>;

  guardian(overrides?: CallOverrides): Promise<string>;

  "guardian()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    vault_: string,
    owner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    vault_: string,
    owner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sendERC20(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendERC20(address,address,uint256)"(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendERC721(
    token: string,
    to: string,
    tokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendERC721(address,address,uint256)"(
    token: string,
    to: string,
    tokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sendNativeToken(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sendNativeToken(address,uint256)"(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGuardian(
    newGuardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGuardian(address)"(
    newGuardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUSDConverter(
    token: string,
    converter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUSDConverter(address,address)"(
    token: string,
    converter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUSDToken(
    token: string,
    decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUSDToken(address,uint256)"(
    token: string,
    decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalCapturedUSD(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCapturedUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unsetUSDToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsetUSDToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    collectToken(token: string, overrides?: CallOverrides): Promise<void>;

    "collectToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllUSDTokens(overrides?: CallOverrides): Promise<string[]>;

    "getAllUSDTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getUSDToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getUSDToken(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUSDTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDTokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
    }>;

    "getUSDTokenInfo(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
    }>;

    guardian(overrides?: CallOverrides): Promise<string>;

    "guardian()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      vault_: string,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      vault_: string,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sendERC20(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendERC20(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendERC721(
      token: string,
      to: string,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendERC721(address,address,uint256)"(
      token: string,
      to: string,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendNativeToken(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sendNativeToken(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuardian(newGuardian: string, overrides?: CallOverrides): Promise<void>;

    "setGuardian(address)"(
      newGuardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDConverter(
      token: string,
      converter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUSDConverter(address,address)"(
      token: string,
      converter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDToken(
      token: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUSDToken(address,uint256)"(
      token: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCapturedUSD(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCapturedUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unsetUSDToken(token: string, overrides?: CallOverrides): Promise<void>;

    "unsetUSDToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AddUSDToken(tokenAddresss: string | null): EventFilter;

    ConvertToUSD(
      tokenIn: string | null,
      balanceIn: null,
      tokenOut: string | null,
      balanceOut: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RemoveUSDToken(tokenAddresss: string | null): EventFilter;

    SetGuardian(
      previousGuardian: string | null,
      newGuardian: string | null
    ): EventFilter;

    SetUSDConverter(
      tokenAddress: string | null,
      converter: string | null
    ): EventFilter;

    TranferToVault(tokenAddress: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    collectToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "collectToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAllUSDTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllUSDTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUSDToken(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUSDTokenCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDTokenCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDTokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUSDTokenInfo(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    "guardian()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      vault_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      vault_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sendERC20(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendERC20(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendERC721(
      token: string,
      to: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendERC721(address,address,uint256)"(
      token: string,
      to: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sendNativeToken(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sendNativeToken(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGuardian(newGuardian: string, overrides?: Overrides): Promise<BigNumber>;

    "setGuardian(address)"(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUSDConverter(
      token: string,
      converter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUSDConverter(address,address)"(
      token: string,
      converter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUSDToken(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUSDToken(address,uint256)"(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalCapturedUSD(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCapturedUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unsetUSDToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "unsetUSDToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    collectToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAllUSDTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllUSDTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDToken(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUSDToken(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDTokenCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUSDTokenCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUSDTokenInfo(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUSDTokenInfo(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guardian()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      vault_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      vault_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sendERC20(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendERC20(address,address,uint256)"(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendERC721(
      token: string,
      to: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendERC721(address,address,uint256)"(
      token: string,
      to: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sendNativeToken(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sendNativeToken(address,uint256)"(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGuardian(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGuardian(address)"(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUSDConverter(
      token: string,
      converter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUSDConverter(address,address)"(
      token: string,
      converter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUSDToken(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUSDToken(address,uint256)"(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalCapturedUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalCapturedUSD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unsetUSDToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsetUSDToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
