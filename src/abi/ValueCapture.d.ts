/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ValueCaptureInterface extends ethers.utils.Interface {
  functions: {
    "SYSTEM_DECIMALS()": FunctionFragment;
    "TOTAL_CAPTURED_USD_KEY()": FunctionFragment;
    "VALUE_CAPTURE_ADMIN_ROLE()": FunctionFragment;
    "addUSDToken(address,uint256)": FunctionFragment;
    "assetEntries(address)": FunctionFragment;
    "authenticator()": FunctionFragment;
    "dataExchange()": FunctionFragment;
    "feedCapturedValueToL1()": FunctionFragment;
    "forwardAsset(address,uint256)": FunctionFragment;
    "forwardERC20Token(address,uint256)": FunctionFragment;
    "forwardERC721Token(address,uint256)": FunctionFragment;
    "forwardETH(uint256)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "listUSDTokens(uint256,uint256)": FunctionFragment;
    "removeUSDToken(address)": FunctionFragment;
    "setConvertor(address,address,address,uint256)": FunctionFragment;
    "totalCapturedUSD()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SYSTEM_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_CAPTURED_USD_KEY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALUE_CAPTURE_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addUSDToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetEntries",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "authenticator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dataExchange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feedCapturedValueToL1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forwardAsset",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardERC20Token",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardERC721Token",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardETH",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listUSDTokens",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeUSDToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setConvertor",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCapturedUSD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "SYSTEM_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_CAPTURED_USD_KEY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALUE_CAPTURE_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addUSDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dataExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedCapturedValueToL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardERC20Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardERC721Token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forwardETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listUSDTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeUSDToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConvertor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCapturedUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "AddUSDToken(address)": EventFragment;
    "ConvertToken(address,uint256,address,uint256)": EventFragment;
    "ForwardAsset(address,uint256,uint256)": EventFragment;
    "ForwardERC20Token(address,uint256)": EventFragment;
    "ForwardERC721Token(address,uint256)": EventFragment;
    "ForwardETH(uint256)": EventFragment;
    "RemoveUSDToken(address)": EventFragment;
    "SetConvertor(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddUSDToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForwardAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForwardERC20Token"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForwardERC721Token"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForwardETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveUSDToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetConvertor"): EventFragment;
}

export class ValueCapture extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ValueCaptureInterface;

  functions: {
    SYSTEM_DECIMALS(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "SYSTEM_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    TOTAL_CAPTURED_USD_KEY(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "TOTAL_CAPTURED_USD_KEY()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    VALUE_CAPTURE_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "VALUE_CAPTURE_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    addUSDToken(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addUSDToken(address,uint256)"(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    assetEntries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      oracle: string;
      convertor: string;
      slippageTolerance: BigNumber;
      cumulativeConvertedAmount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
    }>;

    "assetEntries(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      oracle: string;
      convertor: string;
      slippageTolerance: BigNumber;
      cumulativeConvertedAmount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
    }>;

    authenticator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "authenticator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    dataExchange(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dataExchange()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    feedCapturedValueToL1(overrides?: Overrides): Promise<ContractTransaction>;

    "feedCapturedValueToL1()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forwardAsset(
      token: string,
      amountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forwardAsset(address,uint256)"(
      token: string,
      amountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forwardERC20Token(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forwardERC20Token(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forwardERC721Token(
      token: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forwardERC721Token(address,uint256)"(
      token: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forwardETH(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forwardETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      authenticator_: string,
      dataExchange_: string,
      vault_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      authenticator_: string,
      dataExchange_: string,
      vault_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    listUSDTokens(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "listUSDTokens(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    removeUSDToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeUSDToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setConvertor(
      token: string,
      oracle: string,
      convertor_: string,
      slippageTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setConvertor(address,address,address,uint256)"(
      token: string,
      oracle: string,
      convertor_: string,
      slippageTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalCapturedUSD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalCapturedUSD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  SYSTEM_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  "SYSTEM_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

  TOTAL_CAPTURED_USD_KEY(overrides?: CallOverrides): Promise<string>;

  "TOTAL_CAPTURED_USD_KEY()"(overrides?: CallOverrides): Promise<string>;

  VALUE_CAPTURE_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "VALUE_CAPTURE_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  addUSDToken(
    token: string,
    decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addUSDToken(address,uint256)"(
    token: string,
    decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  assetEntries(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    oracle: string;
    convertor: string;
    slippageTolerance: BigNumber;
    cumulativeConvertedAmount: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
  }>;

  "assetEntries(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    oracle: string;
    convertor: string;
    slippageTolerance: BigNumber;
    cumulativeConvertedAmount: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
  }>;

  authenticator(overrides?: CallOverrides): Promise<string>;

  "authenticator()"(overrides?: CallOverrides): Promise<string>;

  dataExchange(overrides?: CallOverrides): Promise<string>;

  "dataExchange()"(overrides?: CallOverrides): Promise<string>;

  feedCapturedValueToL1(overrides?: Overrides): Promise<ContractTransaction>;

  "feedCapturedValueToL1()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forwardAsset(
    token: string,
    amountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forwardAsset(address,uint256)"(
    token: string,
    amountIn: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forwardERC20Token(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forwardERC20Token(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forwardERC721Token(
    token: string,
    tokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forwardERC721Token(address,uint256)"(
    token: string,
    tokenID: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forwardETH(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forwardETH(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    authenticator_: string,
    dataExchange_: string,
    vault_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    authenticator_: string,
    dataExchange_: string,
    vault_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  listUSDTokens(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listUSDTokens(uint256,uint256)"(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  removeUSDToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeUSDToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setConvertor(
    token: string,
    oracle: string,
    convertor_: string,
    slippageTolerance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setConvertor(address,address,address,uint256)"(
    token: string,
    oracle: string,
    convertor_: string,
    slippageTolerance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalCapturedUSD(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCapturedUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    SYSTEM_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "SYSTEM_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_CAPTURED_USD_KEY(overrides?: CallOverrides): Promise<string>;

    "TOTAL_CAPTURED_USD_KEY()"(overrides?: CallOverrides): Promise<string>;

    VALUE_CAPTURE_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "VALUE_CAPTURE_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    addUSDToken(
      token: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addUSDToken(address,uint256)"(
      token: string,
      decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetEntries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      oracle: string;
      convertor: string;
      slippageTolerance: BigNumber;
      cumulativeConvertedAmount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
    }>;

    "assetEntries(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      oracle: string;
      convertor: string;
      slippageTolerance: BigNumber;
      cumulativeConvertedAmount: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
    }>;

    authenticator(overrides?: CallOverrides): Promise<string>;

    "authenticator()"(overrides?: CallOverrides): Promise<string>;

    dataExchange(overrides?: CallOverrides): Promise<string>;

    "dataExchange()"(overrides?: CallOverrides): Promise<string>;

    feedCapturedValueToL1(overrides?: CallOverrides): Promise<void>;

    "feedCapturedValueToL1()"(overrides?: CallOverrides): Promise<void>;

    forwardAsset(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "forwardAsset(address,uint256)"(
      token: string,
      amountIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forwardERC20Token(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "forwardERC20Token(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forwardERC721Token(
      token: string,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "forwardERC721Token(address,uint256)"(
      token: string,
      tokenID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forwardETH(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "forwardETH(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      authenticator_: string,
      dataExchange_: string,
      vault_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      authenticator_: string,
      dataExchange_: string,
      vault_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    listUSDTokens(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listUSDTokens(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    removeUSDToken(token: string, overrides?: CallOverrides): Promise<void>;

    "removeUSDToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConvertor(
      token: string,
      oracle: string,
      convertor_: string,
      slippageTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setConvertor(address,address,address,uint256)"(
      token: string,
      oracle: string,
      convertor_: string,
      slippageTolerance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCapturedUSD(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCapturedUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AddUSDToken(usdToken: string | null): EventFilter;

    ConvertToken(
      tokenIn: string | null,
      balanceIn: null,
      tokenOut: string | null,
      balanceOut: null
    ): EventFilter;

    ForwardAsset(
      tokenOut: string | null,
      amountOut: null,
      normalizeAmountOut: null
    ): EventFilter;

    ForwardERC20Token(tokenOut: string | null, amount: null): EventFilter;

    ForwardERC721Token(tokenOut: string | null, tokenID: null): EventFilter;

    ForwardETH(amount: null): EventFilter;

    RemoveUSDToken(usdToken: string | null): EventFilter;

    SetConvertor(
      tokenAddress: string | null,
      convertor: string | null
    ): EventFilter;
  };

  estimateGas: {
    SYSTEM_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    "SYSTEM_DECIMALS()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_CAPTURED_USD_KEY(overrides?: CallOverrides): Promise<BigNumber>;

    "TOTAL_CAPTURED_USD_KEY()"(overrides?: CallOverrides): Promise<BigNumber>;

    VALUE_CAPTURE_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "VALUE_CAPTURE_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addUSDToken(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addUSDToken(address,uint256)"(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    assetEntries(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "assetEntries(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authenticator(overrides?: CallOverrides): Promise<BigNumber>;

    "authenticator()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataExchange(overrides?: CallOverrides): Promise<BigNumber>;

    "dataExchange()"(overrides?: CallOverrides): Promise<BigNumber>;

    feedCapturedValueToL1(overrides?: Overrides): Promise<BigNumber>;

    "feedCapturedValueToL1()"(overrides?: Overrides): Promise<BigNumber>;

    forwardAsset(
      token: string,
      amountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forwardAsset(address,uint256)"(
      token: string,
      amountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forwardERC20Token(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forwardERC20Token(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forwardERC721Token(
      token: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forwardERC721Token(address,uint256)"(
      token: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forwardETH(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "forwardETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      authenticator_: string,
      dataExchange_: string,
      vault_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      authenticator_: string,
      dataExchange_: string,
      vault_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    listUSDTokens(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listUSDTokens(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeUSDToken(token: string, overrides?: Overrides): Promise<BigNumber>;

    "removeUSDToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setConvertor(
      token: string,
      oracle: string,
      convertor_: string,
      slippageTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setConvertor(address,address,address,uint256)"(
      token: string,
      oracle: string,
      convertor_: string,
      slippageTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalCapturedUSD(overrides?: CallOverrides): Promise<BigNumber>;

    "totalCapturedUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SYSTEM_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SYSTEM_DECIMALS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_CAPTURED_USD_KEY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOTAL_CAPTURED_USD_KEY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALUE_CAPTURE_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "VALUE_CAPTURE_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addUSDToken(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addUSDToken(address,uint256)"(
      token: string,
      decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    assetEntries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetEntries(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authenticator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "authenticator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataExchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dataExchange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feedCapturedValueToL1(overrides?: Overrides): Promise<PopulatedTransaction>;

    "feedCapturedValueToL1()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forwardAsset(
      token: string,
      amountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forwardAsset(address,uint256)"(
      token: string,
      amountIn: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forwardERC20Token(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forwardERC20Token(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forwardERC721Token(
      token: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forwardERC721Token(address,uint256)"(
      token: string,
      tokenID: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forwardETH(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forwardETH(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      authenticator_: string,
      dataExchange_: string,
      vault_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      authenticator_: string,
      dataExchange_: string,
      vault_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    listUSDTokens(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listUSDTokens(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeUSDToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeUSDToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setConvertor(
      token: string,
      oracle: string,
      convertor_: string,
      slippageTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setConvertor(address,address,address,uint256)"(
      token: string,
      oracle: string,
      convertor_: string,
      slippageTolerance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalCapturedUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalCapturedUSD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
