/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LpGovernorInterface extends ethers.utils.Interface {
  functions: {
    "BALLOT_TYPEHASH()": FunctionFragment;
    "DELEGATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "SIGNATURE_PERPETUAL_SETTLE()": FunctionFragment;
    "SIGNATURE_PERPETUAL_SET_OPERATOR()": FunctionFragment;
    "SIGNATURE_PERPETUAL_UPGRADE()": FunctionFragment;
    "__abdicate()": FunctionFragment;
    "__acceptAdmin()": FunctionFragment;
    "__executeSetTimelockPendingAdmin(address,uint256)": FunctionFragment;
    "__queueSetTimelockPendingAdmin(address,uint256)": FunctionFragment;
    "_rewardToken()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "criticalQuorumVotes()": FunctionFragment;
    "delayAfterSucceeded()": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getDelegate(address)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getPriorThreshold(uint256)": FunctionFragment;
    "getPriorVotes(address,uint256)": FunctionFragment;
    "getQuorumVotes(uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "getReward()": FunctionFragment;
    "getVoteBalance(address)": FunctionFragment;
    "getVoteBalanceAt(address,uint256)": FunctionFragment;
    "getVoteBalanceCheckpointAt(address,uint256)": FunctionFragment;
    "getVoteBalanceCheckpointCount(address)": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "guardian()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isCriticalFunction(string)": FunctionFragment;
    "isLocked(address)": FunctionFragment;
    "lastTimeRewardApplicable()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "latestProposalIds(address)": FunctionFragment;
    "liquidityPool()": FunctionFragment;
    "name()": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposalThreshold()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(address[],uint256[],string[],bytes[],string)": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "quorumVotes()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardDistribution()": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "setRewardDistribution(address)": FunctionFragment;
    "setRewardRate(uint256)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "timelock()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockBlocks(address)": FunctionFragment;
    "unlockPeriod()": FunctionFragment;
    "userRewardPerTokenPaid(address)": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_PERPETUAL_SETTLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_PERPETUAL_SET_OPERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIGNATURE_PERPETUAL_UPGRADE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__abdicate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__executeSetTimelockPendingAdmin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "__queueSetTimelockPendingAdmin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "criticalQuorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delayAfterSucceeded",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getDelegate", values: [string]): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPriorThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuorumVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getVoteBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteBalanceAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteBalanceCheckpointAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteBalanceCheckpointCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCriticalFunction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BigNumberish[], string[], BytesLike[], string]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "quorumVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRewardDistribution",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockBlocks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_PERPETUAL_SETTLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_PERPETUAL_SET_OPERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIGNATURE_PERPETUAL_UPGRADE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "__abdicate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "__acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__executeSetTimelockPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__queueSetTimelockPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "criticalQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delayAfterSucceeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriorThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteBalanceAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteBalanceCheckpointAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteBalanceCheckpointCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCriticalFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalQueued(uint256,uint256)": EventFragment;
    "RewardAdded(uint256,uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "RewardRateChanged(uint256,uint256,uint256)": EventFragment;
    "SaveVoteBalanceCheckpoint(address,uint256)": EventFragment;
    "Stake(address,uint256)": EventFragment;
    "VoteCast(address,uint256,bool,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardRateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaveVoteBalanceCheckpoint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class LpGovernor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LpGovernorInterface;

  functions: {
    BALLOT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DELEGATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    SIGNATURE_PERPETUAL_SETTLE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "SIGNATURE_PERPETUAL_SETTLE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    SIGNATURE_PERPETUAL_SET_OPERATOR(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "SIGNATURE_PERPETUAL_SET_OPERATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    SIGNATURE_PERPETUAL_UPGRADE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "SIGNATURE_PERPETUAL_UPGRADE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    __abdicate(overrides?: Overrides): Promise<ContractTransaction>;

    "__abdicate()"(overrides?: Overrides): Promise<ContractTransaction>;

    __acceptAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "__acceptAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    _rewardToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "_rewardToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    criticalQuorumVotes(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "criticalQuorumVotes()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    delayAfterSucceeded(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "delayAfterSucceeded()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposits(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "deposits(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    domainSeparator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "domainSeparator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    getDelegate(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getDelegate(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getNonce(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPriorThreshold(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPriorThreshold(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getQuorumVotes(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getQuorumVotes(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    getReward(overrides?: Overrides): Promise<ContractTransaction>;

    "getReward()"(overrides?: Overrides): Promise<ContractTransaction>;

    getVoteBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVoteBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVoteBalanceAt(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVoteBalanceAt(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getVoteBalanceCheckpointAt(
      account: string,
      checkpointIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getVoteBalanceCheckpointAt(address,uint256)"(
      account: string,
      checkpointIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getVoteBalanceCheckpointCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getVoteBalanceCheckpointCount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    gracePeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "gracePeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    guardian(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "guardian()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialize(
      shareToken_: string,
      rewardToken_: string,
      timelock_: string,
      guardian_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address)"(
      shareToken_: string,
      rewardToken_: string,
      timelock_: string,
      guardian_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isCriticalFunction(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isCriticalFunction(string)"(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isLocked(
      voter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isLocked(address)"(
      voter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastTimeRewardApplicable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastUpdateTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    liquidityPool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "liquidityPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyRewardAmount(uint256)"(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    periodFinish(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "periodFinish()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalThreshold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalThreshold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    quorumVotes(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "quorumVotes()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardDistribution(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "rewardDistribution()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    rewardPerToken(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardPerToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardPerTokenStored()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setRewardDistribution(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardDistribution(address)"(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRewardRate(uint256)"(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shareToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "shareToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    timelock(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "timelock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unlockBlocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "unlockBlocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    unlockPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "unlockPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    votingDelay(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "votingDelay()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    votingPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "votingPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  SIGNATURE_PERPETUAL_SETTLE(overrides?: CallOverrides): Promise<string>;

  "SIGNATURE_PERPETUAL_SETTLE()"(overrides?: CallOverrides): Promise<string>;

  SIGNATURE_PERPETUAL_SET_OPERATOR(overrides?: CallOverrides): Promise<string>;

  "SIGNATURE_PERPETUAL_SET_OPERATOR()"(
    overrides?: CallOverrides
  ): Promise<string>;

  SIGNATURE_PERPETUAL_UPGRADE(overrides?: CallOverrides): Promise<string>;

  "SIGNATURE_PERPETUAL_UPGRADE()"(overrides?: CallOverrides): Promise<string>;

  __abdicate(overrides?: Overrides): Promise<ContractTransaction>;

  "__abdicate()"(overrides?: Overrides): Promise<ContractTransaction>;

  __acceptAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "__acceptAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  __executeSetTimelockPendingAdmin(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__executeSetTimelockPendingAdmin(address,uint256)"(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  __queueSetTimelockPendingAdmin(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "__queueSetTimelockPendingAdmin(address,uint256)"(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  _rewardToken(overrides?: CallOverrides): Promise<string>;

  "_rewardToken()"(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancel(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVote(uint256,bool)"(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  castVoteBySig(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  criticalQuorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "criticalQuorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  delayAfterSucceeded(overrides?: CallOverrides): Promise<BigNumber>;

  "delayAfterSucceeded()"(overrides?: CallOverrides): Promise<BigNumber>;

  delegate(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegate(address)"(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposits(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "deposits(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "earned(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  execute(
    proposalId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    proposalId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: BigNumber[];
    2: string[];
    3: string[];
  }>;

  "getActions(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: BigNumber[];
    2: string[];
    3: string[];
  }>;

  getDelegate(account: string, overrides?: CallOverrides): Promise<string>;

  "getDelegate(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getNonce(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriorThreshold(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriorThreshold(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriorVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriorVotes(address,uint256)"(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getQuorumVotes(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getQuorumVotes(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  "getReceipt(uint256,address)"(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  getReward(overrides?: Overrides): Promise<ContractTransaction>;

  "getReward()"(overrides?: Overrides): Promise<ContractTransaction>;

  getVoteBalance(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVoteBalance(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoteBalanceAt(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVoteBalanceAt(address,uint256)"(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoteBalanceCheckpointAt(
    account: string,
    checkpointIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getVoteBalanceCheckpointAt(address,uint256)"(
    account: string,
    checkpointIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  getVoteBalanceCheckpointCount(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVoteBalanceCheckpointCount(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "gracePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  guardian(overrides?: CallOverrides): Promise<string>;

  "guardian()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    shareToken_: string,
    rewardToken_: string,
    timelock_: string,
    guardian_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address)"(
    shareToken_: string,
    rewardToken_: string,
    timelock_: string,
    guardian_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isCriticalFunction(
    functionSignature: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isCriticalFunction(string)"(
    functionSignature: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLocked(voter: string, overrides?: Overrides): Promise<ContractTransaction>;

  "isLocked(address)"(
    voter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  "lastTimeRewardApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "latestProposalIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidityPool(overrides?: CallOverrides): Promise<string>;

  "liquidityPool()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    reward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyRewardAmount(uint256)"(
    reward: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    eta: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
    8: boolean;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    eta: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
    8: boolean;
  }>;

  propose(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "propose(address[],uint256[],string[],bytes[],string)"(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queue(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queue(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

  "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardDistribution(overrides?: CallOverrides): Promise<string>;

  "rewardDistribution()"(overrides?: CallOverrides): Promise<string>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "rewards(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRewardDistribution(
    _rewardDistribution: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardDistribution(address)"(
    _rewardDistribution: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRewardRate(
    newRewardRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRewardRate(uint256)"(
    newRewardRate: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unlockBlocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "unlockBlocks(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "unlockPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  userRewardPerTokenPaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userRewardPerTokenPaid(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    SIGNATURE_PERPETUAL_SETTLE(overrides?: CallOverrides): Promise<string>;

    "SIGNATURE_PERPETUAL_SETTLE()"(overrides?: CallOverrides): Promise<string>;

    SIGNATURE_PERPETUAL_SET_OPERATOR(
      overrides?: CallOverrides
    ): Promise<string>;

    "SIGNATURE_PERPETUAL_SET_OPERATOR()"(
      overrides?: CallOverrides
    ): Promise<string>;

    SIGNATURE_PERPETUAL_UPGRADE(overrides?: CallOverrides): Promise<string>;

    "SIGNATURE_PERPETUAL_UPGRADE()"(overrides?: CallOverrides): Promise<string>;

    __abdicate(overrides?: CallOverrides): Promise<void>;

    "__abdicate()"(overrides?: CallOverrides): Promise<void>;

    __acceptAdmin(overrides?: CallOverrides): Promise<void>;

    "__acceptAdmin()"(overrides?: CallOverrides): Promise<void>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _rewardToken(overrides?: CallOverrides): Promise<string>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    criticalQuorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "criticalQuorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayAfterSucceeded(overrides?: CallOverrides): Promise<BigNumber>;

    "delayAfterSucceeded()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    "delegate(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    getDelegate(account: string, overrides?: CallOverrides): Promise<string>;

    "getDelegate(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorThreshold(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorThreshold(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumVotes(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuorumVotes(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    getReward(overrides?: CallOverrides): Promise<void>;

    "getReward()"(overrides?: CallOverrides): Promise<void>;

    getVoteBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoteBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteBalanceAt(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoteBalanceAt(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteBalanceCheckpointAt(
      account: string,
      checkpointIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getVoteBalanceCheckpointAt(address,uint256)"(
      account: string,
      checkpointIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getVoteBalanceCheckpointCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoteBalanceCheckpointCount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<string>;

    "guardian()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      shareToken_: string,
      rewardToken_: string,
      timelock_: string,
      guardian_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address)"(
      shareToken_: string,
      rewardToken_: string,
      timelock_: string,
      guardian_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isCriticalFunction(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isCriticalFunction(string)"(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLocked(voter: string, overrides?: CallOverrides): Promise<boolean>;

    "isLocked(address)"(
      voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTimeRewardApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<string>;

    "liquidityPool()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyRewardAmount(uint256)"(
      reward: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardDistribution(overrides?: CallOverrides): Promise<string>;

    "rewardDistribution()"(overrides?: CallOverrides): Promise<string>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardDistribution(
      _rewardDistribution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardDistribution(address)"(
      _rewardDistribution: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRate(
      newRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRewardRate(uint256)"(
      newRewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockBlocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "unlockBlocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DelegateChanged(
      delegator: string | null,
      fromDelegate: string | null,
      toDelegate: string | null
    ): EventFilter;

    DelegateVotesChanged(
      delegate: string | null,
      previousBalance: null,
      newBalance: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ProposalCanceled(id: null): EventFilter;

    ProposalCreated(
      id: null,
      proposer: null,
      targets: null,
      values: null,
      signatures: null,
      calldatas: null,
      startBlock: null,
      endBlock: null,
      description: null
    ): EventFilter;

    ProposalExecuted(id: null): EventFilter;

    ProposalQueued(id: null, eta: null): EventFilter;

    RewardAdded(reward: null, periodFinish: null): EventFilter;

    RewardPaid(user: string | null, reward: null): EventFilter;

    RewardRateChanged(
      previousRate: null,
      currentRate: null,
      periodFinish: null
    ): EventFilter;

    SaveVoteBalanceCheckpoint(
      account: string | null,
      balance: null
    ): EventFilter;

    Stake(account: string | null, amount: null): EventFilter;

    VoteCast(
      voter: null,
      proposalId: null,
      support: null,
      votes: null
    ): EventFilter;

    Withdraw(account: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    SIGNATURE_PERPETUAL_SETTLE(overrides?: CallOverrides): Promise<BigNumber>;

    "SIGNATURE_PERPETUAL_SETTLE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SIGNATURE_PERPETUAL_SET_OPERATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "SIGNATURE_PERPETUAL_SET_OPERATOR()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SIGNATURE_PERPETUAL_UPGRADE(overrides?: CallOverrides): Promise<BigNumber>;

    "SIGNATURE_PERPETUAL_UPGRADE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    __abdicate(overrides?: Overrides): Promise<BigNumber>;

    "__abdicate()"(overrides?: Overrides): Promise<BigNumber>;

    __acceptAdmin(overrides?: Overrides): Promise<BigNumber>;

    "__acceptAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    _rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(proposalId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    criticalQuorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "criticalQuorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    delayAfterSucceeded(overrides?: CallOverrides): Promise<BigNumber>;

    "delayAfterSucceeded()"(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides): Promise<BigNumber>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposits(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDelegate(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getDelegate(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorThreshold(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorThreshold(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuorumVotes(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuorumVotes(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(overrides?: Overrides): Promise<BigNumber>;

    "getReward()"(overrides?: Overrides): Promise<BigNumber>;

    getVoteBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoteBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteBalanceAt(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoteBalanceAt(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteBalanceCheckpointAt(
      account: string,
      checkpointIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoteBalanceCheckpointAt(address,uint256)"(
      account: string,
      checkpointIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteBalanceCheckpointCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVoteBalanceCheckpointCount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    "guardian()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      shareToken_: string,
      rewardToken_: string,
      timelock_: string,
      guardian_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address)"(
      shareToken_: string,
      rewardToken_: string,
      timelock_: string,
      guardian_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isCriticalFunction(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isCriticalFunction(string)"(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocked(voter: string, overrides?: Overrides): Promise<BigNumber>;

    "isLocked(address)"(
      voter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTimeRewardApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyRewardAmount(uint256)"(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    quorumVotes(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardDistribution()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardDistribution(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardDistribution(address)"(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRewardRate(uint256)"(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unlockBlocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "unlockBlocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "unlockPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DELEGATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_PERPETUAL_SETTLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIGNATURE_PERPETUAL_SETTLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_PERPETUAL_SET_OPERATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIGNATURE_PERPETUAL_SET_OPERATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SIGNATURE_PERPETUAL_UPGRADE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SIGNATURE_PERPETUAL_UPGRADE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __abdicate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "__abdicate()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    __acceptAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "__acceptAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    _rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "_rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    criticalQuorumVotes(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "criticalQuorumVotes()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayAfterSucceeded(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delayAfterSucceeded()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposits(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposits(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDelegate(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelegate(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorThreshold(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorThreshold(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuorumVotes(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuorumVotes(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(overrides?: Overrides): Promise<PopulatedTransaction>;

    "getReward()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getVoteBalance(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVoteBalance(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteBalanceAt(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVoteBalanceAt(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteBalanceCheckpointAt(
      account: string,
      checkpointIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVoteBalanceCheckpointAt(address,uint256)"(
      account: string,
      checkpointIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteBalanceCheckpointCount(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVoteBalanceCheckpointCount(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guardian()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      shareToken_: string,
      rewardToken_: string,
      timelock_: string,
      guardian_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address)"(
      shareToken_: string,
      rewardToken_: string,
      timelock_: string,
      guardian_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isCriticalFunction(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isCriticalFunction(string)"(
      functionSignature: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(
      voter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isLocked(address)"(
      voter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTimeRewardApplicable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyRewardAmount(uint256)"(
      reward: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodFinish()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    quorumVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quorumVotes()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardDistribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardDistribution()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPerToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerTokenStored()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardDistribution(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardDistribution(address)"(
      _rewardDistribution: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRewardRate(uint256)"(
      newRewardRate: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unlockBlocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unlockBlocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "unlockPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
