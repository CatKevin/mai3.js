/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PerpetualMakerInterface extends ethers.utils.Interface {
  functions: {
    "activeProxy(address)": FunctionFragment;
    "addVersion(address,uint256,string)": FunctionFragment;
    "createPerpetual(address,int256[7],int256[5],int256[5],int256[5],uint256)": FunctionFragment;
    "createPerpetualWith(address,address,int256[7],int256[5],int256[5],int256[5],uint256)": FunctionFragment;
    "deactiveProxy(address)": FunctionFragment;
    "describe(address)": FunctionFragment;
    "isVersionCompatibleWith(address,address)": FunctionFragment;
    "isVersionValid(address)": FunctionFragment;
    "latestVersion()": FunctionFragment;
    "listActivePerpetualForTrader(address,uint256,uint256)": FunctionFragment;
    "listPerpetuals(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalActivePerpetualCountForTrader(address)": FunctionFragment;
    "totalPerpetualCount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "vaultFeeRate()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "activeProxy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addVersion",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createPerpetual",
    values: [
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPerpetualWith",
    values: [
      string,
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deactiveProxy",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "describe", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isVersionCompatibleWith",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVersionValid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listActivePerpetualForTrader",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listPerpetuals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalActivePerpetualCountForTrader",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPerpetualCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "activeProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPerpetualWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactiveProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "describe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVersionCompatibleWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVersionValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listActivePerpetualForTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listPerpetuals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalActivePerpetualCountForTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPerpetualCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AddVersion(address)": EventFragment;
    "CreatePerpetual(address,address,address,address,address,address,int256[7],int256[5])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePerpetual"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PerpetualMaker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PerpetualMakerInterface;

  functions: {
    activeProxy(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activeProxy(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addVersion(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addVersion(address,uint256,string)"(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPerpetual(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPerpetual(address,int256[7],int256[5],int256[5],int256[5],uint256)"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPerpetualWith(
      implementation: string,
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPerpetualWith(address,address,int256[7],int256[5],int256[5],int256[5],uint256)"(
      implementation: string,
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deactiveProxy(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deactiveProxy(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    describe(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      creationTime: BigNumber;
      compatibility: BigNumber;
      note: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "describe(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      creationTime: BigNumber;
      compatibility: BigNumber;
      note: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    isVersionCompatibleWith(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isVersionCompatibleWith(address,address)"(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isVersionValid(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isVersionValid(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    latestVersion(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "latestVersion()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    listActivePerpetualForTrader(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "listActivePerpetualForTrader(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    listPerpetuals(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "listPerpetuals(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    totalActivePerpetualCountForTrader(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalActivePerpetualCountForTrader(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalPerpetualCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalPerpetualCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vaultFeeRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "vaultFeeRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  activeProxy(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activeProxy(address)"(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addVersion(
    implementation: string,
    compatibility: BigNumberish,
    note: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addVersion(address,uint256,string)"(
    implementation: string,
    compatibility: BigNumberish,
    note: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPerpetual(
    oracle: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPerpetual(address,int256[7],int256[5],int256[5],int256[5],uint256)"(
    oracle: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPerpetualWith(
    implementation: string,
    oracle: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPerpetualWith(address,address,int256[7],int256[5],int256[5],int256[5],uint256)"(
    implementation: string,
    oracle: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deactiveProxy(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deactiveProxy(address)"(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  describe(
    implementation: string,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    creationTime: BigNumber;
    compatibility: BigNumber;
    note: string;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  "describe(address)"(
    implementation: string,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    creationTime: BigNumber;
    compatibility: BigNumber;
    note: string;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  isVersionCompatibleWith(
    base: string,
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isVersionCompatibleWith(address,address)"(
    base: string,
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVersionValid(
    implementation: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isVersionValid(address)"(
    implementation: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestVersion(overrides?: CallOverrides): Promise<string>;

  "latestVersion()"(overrides?: CallOverrides): Promise<string>;

  listActivePerpetualForTrader(
    trader: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listActivePerpetualForTrader(address,uint256,uint256)"(
    trader: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listPerpetuals(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listPerpetuals(uint256,uint256)"(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  totalActivePerpetualCountForTrader(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalActivePerpetualCountForTrader(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalPerpetualCount(overrides?: CallOverrides): Promise<BigNumber>;

  "totalPerpetualCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  vaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "vaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    activeProxy(trader: string, overrides?: CallOverrides): Promise<boolean>;

    "activeProxy(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addVersion(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addVersion(address,uint256,string)"(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createPerpetual(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPerpetual(address,int256[7],int256[5],int256[5],int256[5],uint256)"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createPerpetualWith(
      implementation: string,
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPerpetualWith(address,address,int256[7],int256[5],int256[5],int256[5],uint256)"(
      implementation: string,
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deactiveProxy(trader: string, overrides?: CallOverrides): Promise<boolean>;

    "deactiveProxy(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    describe(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      creationTime: BigNumber;
      compatibility: BigNumber;
      note: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "describe(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      creationTime: BigNumber;
      compatibility: BigNumber;
      note: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    isVersionCompatibleWith(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isVersionCompatibleWith(address,address)"(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVersionValid(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isVersionValid(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestVersion(overrides?: CallOverrides): Promise<string>;

    "latestVersion()"(overrides?: CallOverrides): Promise<string>;

    listActivePerpetualForTrader(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listActivePerpetualForTrader(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listPerpetuals(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listPerpetuals(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    totalActivePerpetualCountForTrader(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalActivePerpetualCountForTrader(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPerpetualCount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPerpetualCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    vaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AddVersion(implementation: null): EventFilter;

    CreatePerpetual(
      perpetual: null,
      governor: null,
      shareToken: null,
      operator: null,
      oracle: null,
      collateral: null,
      coreParams: null,
      riskParams: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    activeProxy(trader: string, overrides?: Overrides): Promise<BigNumber>;

    "activeProxy(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addVersion(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addVersion(address,uint256,string)"(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPerpetual(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPerpetual(address,int256[7],int256[5],int256[5],int256[5],uint256)"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPerpetualWith(
      implementation: string,
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPerpetualWith(address,address,int256[7],int256[5],int256[5],int256[5],uint256)"(
      implementation: string,
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deactiveProxy(trader: string, overrides?: Overrides): Promise<BigNumber>;

    "deactiveProxy(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    describe(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "describe(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVersionCompatibleWith(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isVersionCompatibleWith(address,address)"(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVersionValid(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isVersionValid(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "latestVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    listActivePerpetualForTrader(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listActivePerpetualForTrader(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listPerpetuals(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listPerpetuals(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    totalActivePerpetualCountForTrader(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalActivePerpetualCountForTrader(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPerpetualCount(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPerpetualCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    vaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activeProxy(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activeProxy(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addVersion(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addVersion(address,uint256,string)"(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPerpetual(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPerpetual(address,int256[7],int256[5],int256[5],int256[5],uint256)"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPerpetualWith(
      implementation: string,
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPerpetualWith(address,address,int256[7],int256[5],int256[5],int256[5],uint256)"(
      implementation: string,
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deactiveProxy(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deactiveProxy(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    describe(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "describe(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVersionCompatibleWith(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVersionCompatibleWith(address,address)"(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVersionValid(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVersionValid(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "latestVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listActivePerpetualForTrader(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listActivePerpetualForTrader(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listPerpetuals(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listPerpetuals(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    totalActivePerpetualCountForTrader(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalActivePerpetualCountForTrader(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPerpetualCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalPerpetualCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vaultFeeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
