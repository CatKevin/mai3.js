/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidityPoolInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(int256)": FunctionFragment;
    "adjustMarketRiskParameter(uint256,bytes32,int256)": FunctionFragment;
    "brokerTrade(tuple,int256,bytes)": FunctionFragment;
    "claimFee(int256)": FunctionFragment;
    "claimableFee(address)": FunctionFragment;
    "clear(uint256,address)": FunctionFragment;
    "createMarket(address,int256[8],int256[5],int256[5],int256[5])": FunctionFragment;
    "deposit(uint256,address,int256)": FunctionFragment;
    "donateInsuranceFund(int256)": FunctionFragment;
    "finalize()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "liquidateByAMM(uint256,address,uint256)": FunctionFragment;
    "liquidateByTrader(uint256,address,int256,int256,uint256)": FunctionFragment;
    "liquidityPoolInfo()": FunctionFragment;
    "listUnclearedTraders(uint256,uint256,uint256)": FunctionFragment;
    "marginAccount(uint256,address)": FunctionFragment;
    "marketInfo(uint256)": FunctionFragment;
    "removeLiquidity(int256)": FunctionFragment;
    "settle(uint256,address)": FunctionFragment;
    "trade(uint256,address,int256,int256,uint256,address,bool)": FunctionFragment;
    "unclearedTraderCount(uint256)": FunctionFragment;
    "updateMarketParameter(uint256,bytes32,int256)": FunctionFragment;
    "updateMarketRiskParameter(uint256,bytes32,int256,int256,int256)": FunctionFragment;
    "withdraw(uint256,address,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustMarketRiskParameter",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerTrade",
    values: [
      {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "clear",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateInsuranceFund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByAMM",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByTrader",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listUnclearedTraders",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marginAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "marketInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unclearedTraderCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketParameter",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketRiskParameter",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustMarketRiskParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brokerTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listUnclearedTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marginAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unclearedTraderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketRiskParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddLiquidity(address,int256,int256)": EventFragment;
    "AdjustMarketRiskSetting(uint256,bytes32,int256)": EventFragment;
    "ClaimFee(address,int256)": EventFragment;
    "Clear(uint256,address)": EventFragment;
    "CreateMarket(uint256,address,address,address,address,address,int256[8],int256[5])": EventFragment;
    "Deposit(uint256,address,int256)": EventFragment;
    "DonateInsuranceFund(address,int256)": EventFragment;
    "Finalize()": EventFragment;
    "Liquidate(uint256,address,address,int256,int256)": EventFragment;
    "RemoveLiquidity(address,int256,int256)": EventFragment;
    "Settle(uint256,address,int256)": EventFragment;
    "Trade(uint256,address,int256,int256,int256)": EventFragment;
    "UpdateMarketParameter(uint256,bytes32,int256)": EventFragment;
    "UpdateMarketRiskParameter(uint256,bytes32,int256,int256,int256)": EventFragment;
    "Withdraw(uint256,address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdjustMarketRiskSetting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Clear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateMarket"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonateInsuranceFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarketParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMarketRiskParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class LiquidityPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidityPoolInterface;

  functions: {
    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    adjustMarketRiskParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adjustMarketRiskParameter(uint256,bytes32,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "brokerTrade(tuple,int256,bytes)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimFee(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFee(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    clear(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "clear(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createMarket(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createMarket(address,int256[8],int256[5],int256[5],int256[5])"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,address,int256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    finalize(overrides?: Overrides): Promise<ContractTransaction>;

    "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

    initialize(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address)"(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateByAMM(
      marketIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateByAMM(uint256,address,uint256)"(
      marketIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateByTrader(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateByTrader(uint256,address,int256,int256,uint256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidityPoolInfo(
      overrides?: CallOverrides
    ): Promise<{
      addresses: [string, string, string, string, string, string];
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      marketCount: BigNumber;
      fundingTime: BigNumber;
      0: [string, string, string, string, string, string];
      1: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      2: BigNumber;
      3: BigNumber;
    }>;

    "liquidityPoolInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      addresses: [string, string, string, string, string, string];
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      marketCount: BigNumber;
      fundingTime: BigNumber;
      0: [string, string, string, string, string, string];
      1: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      2: BigNumber;
      3: BigNumber;
    }>;

    listUnclearedTraders(
      marketIndex: BigNumberish,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "listUnclearedTraders(uint256,uint256,uint256)"(
      marketIndex: BigNumberish,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    marginAccount(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cashBalance: BigNumber;
      positionAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "marginAccount(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cashBalance: BigNumber;
      positionAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    marketInfo(
      marketIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "marketInfo(uint256)"(
      marketIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settle(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settle(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trade(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trade(uint256,address,int256,int256,uint256,address,bool)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unclearedTraderCount(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "unclearedTraderCount(uint256)"(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    updateMarketParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMarketParameter(uint256,bytes32,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMarketRiskParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMarketRiskParameter(uint256,bytes32,int256,int256,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,int256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    cashToAdd: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity(int256)"(
    cashToAdd: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  adjustMarketRiskParameter(
    marketIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adjustMarketRiskParameter(uint256,bytes32,int256)"(
    marketIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  brokerTrade(
    order: {
      trader: string;
      broker: string;
      relayer: string;
      liquidityPool: string;
      marketIndex: BigNumberish;
      referrer: string;
      amount: BigNumberish;
      priceLimit: BigNumberish;
      data: BytesLike;
      chainID: BigNumberish;
    },
    amount: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "brokerTrade(tuple,int256,bytes)"(
    order: {
      trader: string;
      broker: string;
      relayer: string;
      liquidityPool: string;
      marketIndex: BigNumberish;
      referrer: string;
      amount: BigNumberish;
      priceLimit: BigNumberish;
      data: BytesLike;
      chainID: BigNumberish;
    },
    amount: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimFee(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFee(int256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimableFee(claimer: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimableFee(address)"(
    claimer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clear(
    marketIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "clear(uint256,address)"(
    marketIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createMarket(
    oracle: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createMarket(address,int256[8],int256[5],int256[5],int256[5])"(
    oracle: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    marketIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,address,int256)"(
    marketIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  donateInsuranceFund(
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "donateInsuranceFund(int256)"(
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  finalize(overrides?: Overrides): Promise<ContractTransaction>;

  "finalize()"(overrides?: Overrides): Promise<ContractTransaction>;

  initialize(
    operator: string,
    collateral: string,
    governor: string,
    shareToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address)"(
    operator: string,
    collateral: string,
    governor: string,
    shareToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateByAMM(
    marketIndex: BigNumberish,
    trader: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateByAMM(uint256,address,uint256)"(
    marketIndex: BigNumberish,
    trader: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateByTrader(
    marketIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateByTrader(uint256,address,int256,int256,uint256)"(
    marketIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidityPoolInfo(
    overrides?: CallOverrides
  ): Promise<{
    addresses: [string, string, string, string, string, string];
    nums: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    marketCount: BigNumber;
    fundingTime: BigNumber;
    0: [string, string, string, string, string, string];
    1: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    2: BigNumber;
    3: BigNumber;
  }>;

  "liquidityPoolInfo()"(
    overrides?: CallOverrides
  ): Promise<{
    addresses: [string, string, string, string, string, string];
    nums: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    marketCount: BigNumber;
    fundingTime: BigNumber;
    0: [string, string, string, string, string, string];
    1: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    2: BigNumber;
    3: BigNumber;
  }>;

  listUnclearedTraders(
    marketIndex: BigNumberish,
    start: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listUnclearedTraders(uint256,uint256,uint256)"(
    marketIndex: BigNumberish,
    start: BigNumberish,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  marginAccount(
    marketIndex: BigNumberish,
    trader: string,
    overrides?: CallOverrides
  ): Promise<{
    cashBalance: BigNumber;
    positionAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "marginAccount(uint256,address)"(
    marketIndex: BigNumberish,
    trader: string,
    overrides?: CallOverrides
  ): Promise<{
    cashBalance: BigNumber;
    positionAmount: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  marketInfo(
    marketIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "marketInfo(uint256)"(
    marketIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidity(
    shareToRemove: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(int256)"(
    shareToRemove: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settle(
    marketIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settle(uint256,address)"(
    marketIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trade(
    marketIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    deadline: BigNumberish,
    referrer: string,
    isCloseOnly: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trade(uint256,address,int256,int256,uint256,address,bool)"(
    marketIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    deadline: BigNumberish,
    referrer: string,
    isCloseOnly: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unclearedTraderCount(
    marketIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "unclearedTraderCount(uint256)"(
    marketIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateMarketParameter(
    marketIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMarketParameter(uint256,bytes32,int256)"(
    marketIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMarketRiskParameter(
    marketIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    minValue: BigNumberish,
    maxValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMarketRiskParameter(uint256,bytes32,int256,int256,int256)"(
    marketIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    minValue: BigNumberish,
    maxValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    marketIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,int256)"(
    marketIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustMarketRiskParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adjustMarketRiskParameter(uint256,bytes32,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "brokerTrade(tuple,int256,bytes)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFee(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "claimFee(int256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clear(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "clear(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarket(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "createMarket(address,int256[8],int256[5],int256[5],int256[5])"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address,int256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalize(overrides?: CallOverrides): Promise<void>;

    "finalize()"(overrides?: CallOverrides): Promise<void>;

    initialize(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address)"(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateByAMM(
      marketIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateByAMM(uint256,address,uint256)"(
      marketIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateByTrader(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateByTrader(uint256,address,int256,int256,uint256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityPoolInfo(
      overrides?: CallOverrides
    ): Promise<{
      addresses: [string, string, string, string, string, string];
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      marketCount: BigNumber;
      fundingTime: BigNumber;
      0: [string, string, string, string, string, string];
      1: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      2: BigNumber;
      3: BigNumber;
    }>;

    "liquidityPoolInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      addresses: [string, string, string, string, string, string];
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      marketCount: BigNumber;
      fundingTime: BigNumber;
      0: [string, string, string, string, string, string];
      1: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      2: BigNumber;
      3: BigNumber;
    }>;

    listUnclearedTraders(
      marketIndex: BigNumberish,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listUnclearedTraders(uint256,uint256,uint256)"(
      marketIndex: BigNumberish,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    marginAccount(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cashBalance: BigNumber;
      positionAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "marginAccount(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cashBalance: BigNumber;
      positionAmount: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    marketInfo(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      oracle: string;
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: number;
      1: string;
      2: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "marketInfo(uint256)"(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      oracle: string;
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: number;
      1: string;
      2: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "settle(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trade(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "trade(uint256,address,int256,int256,uint256,address,bool)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    unclearedTraderCount(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unclearedTraderCount(uint256)"(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMarketParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMarketParameter(uint256,bytes32,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMarketRiskParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMarketRiskParameter(uint256,bytes32,int256,int256,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address,int256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddLiquidity(trader: null, addedCash: null, mintedShare: null): EventFilter;

    AdjustMarketRiskSetting(
      marketIndex: null,
      key: null,
      value: null
    ): EventFilter;

    ClaimFee(claimer: null, amount: null): EventFilter;

    Clear(marketIndex: null, trader: null): EventFilter;

    CreateMarket(
      marketIndex: null,
      governor: null,
      shareToken: null,
      operator: null,
      oracle: null,
      collateral: null,
      coreParams: null,
      riskParams: null
    ): EventFilter;

    Deposit(marketIndex: null, trader: null, amount: null): EventFilter;

    DonateInsuranceFund(trader: null, amount: null): EventFilter;

    Finalize(): EventFilter;

    Liquidate(
      marketIndex: null,
      liquidator: string | null,
      trader: string | null,
      amount: null,
      price: null
    ): EventFilter;

    RemoveLiquidity(
      trader: null,
      returnedCash: null,
      burnedShare: null
    ): EventFilter;

    Settle(marketIndex: null, trader: null, amount: null): EventFilter;

    Trade(
      marketIndex: null,
      trader: string | null,
      positionAmount: null,
      price: null,
      fee: null
    ): EventFilter;

    UpdateMarketParameter(
      marketIndex: null,
      key: null,
      value: null
    ): EventFilter;

    UpdateMarketRiskParameter(
      marketIndex: null,
      key: null,
      value: null,
      minValue: null,
      maxValue: null
    ): EventFilter;

    Withdraw(marketIndex: null, trader: null, amount: null): EventFilter;
  };

  estimateGas: {
    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    adjustMarketRiskParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adjustMarketRiskParameter(uint256,bytes32,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "brokerTrade(tuple,int256,bytes)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimFee(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "claimFee(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clear(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "clear(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createMarket(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createMarket(address,int256[8],int256[5],int256[5],int256[5])"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,address,int256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    finalize(overrides?: Overrides): Promise<BigNumber>;

    "finalize()"(overrides?: Overrides): Promise<BigNumber>;

    initialize(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address)"(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateByAMM(
      marketIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateByAMM(uint256,address,uint256)"(
      marketIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateByTrader(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateByTrader(uint256,address,int256,int256,uint256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidityPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityPoolInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    listUnclearedTraders(
      marketIndex: BigNumberish,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listUnclearedTraders(uint256,uint256,uint256)"(
      marketIndex: BigNumberish,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marginAccount(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marginAccount(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketInfo(
      marketIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "marketInfo(uint256)"(
      marketIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settle(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settle(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trade(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trade(uint256,address,int256,int256,uint256,address,bool)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unclearedTraderCount(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unclearedTraderCount(uint256)"(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateMarketParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMarketParameter(uint256,bytes32,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMarketRiskParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMarketRiskParameter(uint256,bytes32,int256,int256,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address,int256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    adjustMarketRiskParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adjustMarketRiskParameter(uint256,bytes32,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "brokerTrade(tuple,int256,bytes)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        liquidityPool: string;
        marketIndex: BigNumberish;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimFee(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFee(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clear(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "clear(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createMarket(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createMarket(address,int256[8],int256[5],int256[5],int256[5])"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address,int256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    finalize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "finalize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initialize(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address)"(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateByAMM(
      marketIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateByAMM(uint256,address,uint256)"(
      marketIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateByTrader(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateByTrader(uint256,address,int256,int256,uint256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidityPoolInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityPoolInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listUnclearedTraders(
      marketIndex: BigNumberish,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listUnclearedTraders(uint256,uint256,uint256)"(
      marketIndex: BigNumberish,
      start: BigNumberish,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marginAccount(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marginAccount(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketInfo(
      marketIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "marketInfo(uint256)"(
      marketIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settle(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(uint256,address)"(
      marketIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trade(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trade(uint256,address,int256,int256,uint256,address,bool)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unclearedTraderCount(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unclearedTraderCount(uint256)"(
      marketIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMarketParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMarketParameter(uint256,bytes32,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMarketRiskParameter(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMarketRiskParameter(uint256,bytes32,int256,int256,int256)"(
      marketIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,int256)"(
      marketIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
