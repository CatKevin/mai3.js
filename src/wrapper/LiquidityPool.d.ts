/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidityPoolInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(int256)": FunctionFragment;
    "brokerTrade(tuple,int256,bytes,uint8)": FunctionFragment;
    "claimFee(address,int256)": FunctionFragment;
    "claimOperatingship()": FunctionFragment;
    "clear(uint256)": FunctionFragment;
    "createPerpetual(address,int256[9],int256[5],int256[5],int256[5])": FunctionFragment;
    "deposit(uint256,address,int256)": FunctionFragment;
    "donateInsuranceFund(uint256,int256)": FunctionFragment;
    "forceToEnterEmergencyState(uint256)": FunctionFragment;
    "getClaimableFee(address)": FunctionFragment;
    "getClearProgress(uint256)": FunctionFragment;
    "getLiquidityPoolInfo()": FunctionFragment;
    "getMarginAccount(uint256,address)": FunctionFragment;
    "getPerpetualInfo(uint256)": FunctionFragment;
    "getSettleableMargin(uint256,address)": FunctionFragment;
    "initialize(address,address,address,address,bool)": FunctionFragment;
    "liquidateByAMM(uint256,address,uint256)": FunctionFragment;
    "liquidateByTrader(uint256,address,int256,int256,uint256)": FunctionFragment;
    "removeLiquidity(int256)": FunctionFragment;
    "revokeOperatingship()": FunctionFragment;
    "runLiquidityPool()": FunctionFragment;
    "setEmergencyState(uint256)": FunctionFragment;
    "setLiquidityPoolParameter(bytes32,int256)": FunctionFragment;
    "setPerpetualBaseParameter(uint256,bytes32,int256)": FunctionFragment;
    "setPerpetualRiskParameter(uint256,bytes32,int256,int256,int256)": FunctionFragment;
    "settle(uint256,address)": FunctionFragment;
    "trade(uint256,address,int256,int256,uint256,address,bool)": FunctionFragment;
    "transferOperatingship(address,uint256)": FunctionFragment;
    "updatePerpetualRiskParameter(uint256,bytes32,int256)": FunctionFragment;
    "withdraw(uint256,address,int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerTrade",
    values: [
      {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOperatingship",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clear", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "createPerpetual",
    values: [
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateInsuranceFund",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceToEnterEmergencyState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableFee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearProgress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPoolInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginAccount",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpetualInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettleableMargin",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByAMM",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByTrader",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOperatingship",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runLiquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPoolParameter",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualBaseParameter",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerpetualRiskParameter",
    values: [BigNumberish, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOperatingship",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePerpetualRiskParameter",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brokerTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOperatingship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPerpetual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceToEnterEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpetualInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettleableMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOperatingship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPoolParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualBaseParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerpetualRiskParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOperatingship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePerpetualRiskParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddLiquidity(address,int256,int256)": EventFragment;
    "ClaimFee(address,int256)": EventFragment;
    "Clear(uint256,address)": EventFragment;
    "ClearAccount(uint256,address)": EventFragment;
    "CreatePerpetual(uint256,address,address,address,address,address,int256[9],int256[5])": EventFragment;
    "Deposit(uint256,address,int256)": EventFragment;
    "DonateInsuranceFund(uint256,int256)": EventFragment;
    "IncreaseFee(address,int256)": EventFragment;
    "Liquidate(uint256,address,address,int256,int256)": EventFragment;
    "RemoveLiquidity(address,int256,int256)": EventFragment;
    "RunLiquidityPool()": EventFragment;
    "SetClearedState(uint256)": EventFragment;
    "SetEmergencyState(uint256,int256,uint256)": EventFragment;
    "SetLiquidityPoolParameter(bytes32,int256)": EventFragment;
    "SetNormalState(uint256)": EventFragment;
    "SetPerpetualParameter(uint256,bytes32,int256)": EventFragment;
    "SetPerpetualRiskParameter(uint256,bytes32,int256,int256,int256)": EventFragment;
    "Settle(uint256,address,int256)": EventFragment;
    "SettleAccount(uint256,address,int256)": EventFragment;
    "Trade(uint256,address,int256,int256,int256)": EventFragment;
    "UpdatePerpetualRiskParameter(uint256,bytes32,int256)": EventFragment;
    "UpdatePoolMargin(int256)": EventFragment;
    "UpdateUnitAccumulativeFunding(uint256,int256)": EventFragment;
    "Withdraw(uint256,address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Clear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClearAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatePerpetual"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonateInsuranceFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IncreaseFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RunLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetClearedState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetEmergencyState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidityPoolParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNormalState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPerpetualParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPerpetualRiskParameter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Settle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettleAccount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatePerpetualRiskParameter"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePoolMargin"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateUnitAccumulativeFunding"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class LiquidityPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidityPoolInterface;

  functions: {
    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      signType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "brokerTrade(tuple,int256,bytes,uint8)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      signType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimFee(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFee(address,int256)"(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimOperatingship(overrides?: Overrides): Promise<ContractTransaction>;

    "claimOperatingship()"(overrides?: Overrides): Promise<ContractTransaction>;

    clear(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "clear(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createPerpetual(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createPerpetual(address,int256[9],int256[5],int256[5],int256[5])"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    donateInsuranceFund(
      perpetualIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "donateInsuranceFund(uint256,int256)"(
      perpetualIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceToEnterEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "forceToEnterEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getClaimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getClaimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getClearProgress(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      left: BigNumber;
      total: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getClearProgress(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      left: BigNumber;
      total: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getLiquidityPoolInfo(
      overrides?: CallOverrides
    ): Promise<{
      addresses: [string, string, string, string, string, string];
      nums: [BigNumber, BigNumber];
      perpetualCount: BigNumber;
      fundingTime: BigNumber;
      0: [string, string, string, string, string, string];
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: BigNumber;
    }>;

    "getLiquidityPoolInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      addresses: [string, string, string, string, string, string];
      nums: [BigNumber, BigNumber];
      perpetualCount: BigNumber;
      fundingTime: BigNumber;
      0: [string, string, string, string, string, string];
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: BigNumber;
    }>;

    getMarginAccount(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getMarginAccount(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getPerpetualInfo(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getPerpetualInfo(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getSettleableMargin(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      settleableMargin: BigNumber;
      0: BigNumber;
    }>;

    "getSettleableMargin(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      settleableMargin: BigNumber;
      0: BigNumber;
    }>;

    initialize(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      isFastCreationEnabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,bool)"(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      isFastCreationEnabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateByAMM(
      perpetualIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateByAMM(uint256,address,uint256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateByTrader(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateByTrader(uint256,address,int256,int256,uint256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeOperatingship(overrides?: Overrides): Promise<ContractTransaction>;

    "revokeOperatingship()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    runLiquidityPool(overrides?: Overrides): Promise<ContractTransaction>;

    "runLiquidityPool()"(overrides?: Overrides): Promise<ContractTransaction>;

    setEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidityPoolParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidityPoolParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPerpetualBaseParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPerpetualBaseParameter(uint256,bytes32,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPerpetualRiskParameter(uint256,bytes32,int256,int256,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settle(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settle(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trade(uint256,address,int256,int256,uint256,address,bool)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOperatingship(
      newOperator: string,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOperatingship(address,uint256)"(
      newOperator: string,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePerpetualRiskParameter(uint256,bytes32,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    cashToAdd: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity(int256)"(
    cashToAdd: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  brokerTrade(
    order: {
      trader: string;
      broker: string;
      relayer: string;
      referrer: string;
      liquidityPool: string;
      minTradeAmount: BigNumberish;
      amount: BigNumberish;
      limitPrice: BigNumberish;
      triggerPrice: BigNumberish;
      chainID: BigNumberish;
      expiredAt: BigNumberish;
      perpetualIndex: BigNumberish;
      brokerFeeLimit: BigNumberish;
      flags: BigNumberish;
      salt: BigNumberish;
    },
    amount: BigNumberish,
    signature: BytesLike,
    signType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "brokerTrade(tuple,int256,bytes,uint8)"(
    order: {
      trader: string;
      broker: string;
      relayer: string;
      referrer: string;
      liquidityPool: string;
      minTradeAmount: BigNumberish;
      amount: BigNumberish;
      limitPrice: BigNumberish;
      triggerPrice: BigNumberish;
      chainID: BigNumberish;
      expiredAt: BigNumberish;
      perpetualIndex: BigNumberish;
      brokerFeeLimit: BigNumberish;
      flags: BigNumberish;
      salt: BigNumberish;
    },
    amount: BigNumberish,
    signature: BytesLike,
    signType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimFee(
    claimer: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFee(address,int256)"(
    claimer: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimOperatingship(overrides?: Overrides): Promise<ContractTransaction>;

  "claimOperatingship()"(overrides?: Overrides): Promise<ContractTransaction>;

  clear(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "clear(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createPerpetual(
    oracle: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createPerpetual(address,int256[9],int256[5],int256[5],int256[5])"(
    oracle: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,address,int256)"(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  donateInsuranceFund(
    perpetualIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "donateInsuranceFund(uint256,int256)"(
    perpetualIndex: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceToEnterEmergencyState(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "forceToEnterEmergencyState(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getClaimableFee(
    claimer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getClaimableFee(address)"(
    claimer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClearProgress(
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    left: BigNumber;
    total: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getClearProgress(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    left: BigNumber;
    total: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getLiquidityPoolInfo(
    overrides?: CallOverrides
  ): Promise<{
    addresses: [string, string, string, string, string, string];
    nums: [BigNumber, BigNumber];
    perpetualCount: BigNumber;
    fundingTime: BigNumber;
    0: [string, string, string, string, string, string];
    1: [BigNumber, BigNumber];
    2: BigNumber;
    3: BigNumber;
  }>;

  "getLiquidityPoolInfo()"(
    overrides?: CallOverrides
  ): Promise<{
    addresses: [string, string, string, string, string, string];
    nums: [BigNumber, BigNumber];
    perpetualCount: BigNumber;
    fundingTime: BigNumber;
    0: [string, string, string, string, string, string];
    1: [BigNumber, BigNumber];
    2: BigNumber;
    3: BigNumber;
  }>;

  getMarginAccount(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: CallOverrides
  ): Promise<{
    cash: BigNumber;
    position: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getMarginAccount(uint256,address)"(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: CallOverrides
  ): Promise<{
    cash: BigNumber;
    position: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getPerpetualInfo(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getPerpetualInfo(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getSettleableMargin(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSettleableMargin(uint256,address)"(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    operator: string,
    collateral: string,
    governor: string,
    shareToken: string,
    isFastCreationEnabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,bool)"(
    operator: string,
    collateral: string,
    governor: string,
    shareToken: string,
    isFastCreationEnabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateByAMM(
    perpetualIndex: BigNumberish,
    trader: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateByAMM(uint256,address,uint256)"(
    perpetualIndex: BigNumberish,
    trader: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateByTrader(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    limitPrice: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateByTrader(uint256,address,int256,int256,uint256)"(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    limitPrice: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeLiquidity(
    shareToRemove: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidity(int256)"(
    shareToRemove: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeOperatingship(overrides?: Overrides): Promise<ContractTransaction>;

  "revokeOperatingship()"(overrides?: Overrides): Promise<ContractTransaction>;

  runLiquidityPool(overrides?: Overrides): Promise<ContractTransaction>;

  "runLiquidityPool()"(overrides?: Overrides): Promise<ContractTransaction>;

  setEmergencyState(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEmergencyState(uint256)"(
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidityPoolParameter(
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidityPoolParameter(bytes32,int256)"(
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPerpetualBaseParameter(
    perpetualIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPerpetualBaseParameter(uint256,bytes32,int256)"(
    perpetualIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPerpetualRiskParameter(
    perpetualIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    minValue: BigNumberish,
    maxValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPerpetualRiskParameter(uint256,bytes32,int256,int256,int256)"(
    perpetualIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    minValue: BigNumberish,
    maxValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settle(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settle(uint256,address)"(
    perpetualIndex: BigNumberish,
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trade(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    limitPrice: BigNumberish,
    deadline: BigNumberish,
    referrer: string,
    isCloseOnly: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trade(uint256,address,int256,int256,uint256,address,bool)"(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    limitPrice: BigNumberish,
    deadline: BigNumberish,
    referrer: string,
    isCloseOnly: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOperatingship(
    newOperator: string,
    expiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOperatingship(address,uint256)"(
    newOperator: string,
    expiration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePerpetualRiskParameter(
    perpetualIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePerpetualRiskParameter(uint256,bytes32,int256)"(
    perpetualIndex: BigNumberish,
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256,address,int256)"(
    perpetualIndex: BigNumberish,
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      signType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "brokerTrade(tuple,int256,bytes,uint8)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      signType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFee(
      claimer: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFee(address,int256)"(
      claimer: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOperatingship(overrides?: CallOverrides): Promise<void>;

    "claimOperatingship()"(overrides?: CallOverrides): Promise<void>;

    clear(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "clear(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createPerpetual(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "createPerpetual(address,int256[9],int256[5],int256[5],int256[5])"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donateInsuranceFund(
      perpetualIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "donateInsuranceFund(uint256,int256)"(
      perpetualIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    forceToEnterEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "forceToEnterEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearProgress(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      left: BigNumber;
      total: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getClearProgress(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      left: BigNumber;
      total: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getLiquidityPoolInfo(
      overrides?: CallOverrides
    ): Promise<{
      addresses: [string, string, string, string, string, string];
      nums: [BigNumber, BigNumber];
      perpetualCount: BigNumber;
      fundingTime: BigNumber;
      0: [string, string, string, string, string, string];
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: BigNumber;
    }>;

    "getLiquidityPoolInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      addresses: [string, string, string, string, string, string];
      nums: [BigNumber, BigNumber];
      perpetualCount: BigNumber;
      fundingTime: BigNumber;
      0: [string, string, string, string, string, string];
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: BigNumber;
    }>;

    getMarginAccount(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getMarginAccount(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getPerpetualInfo(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      oracle: string;
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: number;
      1: string;
      2: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    "getPerpetualInfo(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      state: number;
      oracle: string;
      nums: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      0: number;
      1: string;
      2: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
    }>;

    getSettleableMargin(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSettleableMargin(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      isFastCreationEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,bool)"(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      isFastCreationEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateByAMM(
      perpetualIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateByAMM(uint256,address,uint256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateByTrader(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateByTrader(uint256,address,int256,int256,uint256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOperatingship(overrides?: CallOverrides): Promise<void>;

    "revokeOperatingship()"(overrides?: CallOverrides): Promise<void>;

    runLiquidityPool(overrides?: CallOverrides): Promise<void>;

    "runLiquidityPool()"(overrides?: CallOverrides): Promise<void>;

    setEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPoolParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidityPoolParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualBaseParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerpetualBaseParameter(uint256,bytes32,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPerpetualRiskParameter(uint256,bytes32,int256,int256,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "settle(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "trade(uint256,address,int256,int256,uint256,address,bool)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOperatingship(
      newOperator: string,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOperatingship(address,uint256)"(
      newOperator: string,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePerpetualRiskParameter(uint256,bytes32,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddLiquidity(trader: null, addedCash: null, mintedShare: null): EventFilter;

    ClaimFee(claimer: null, amount: null): EventFilter;

    Clear(perpetualIndex: null, trader: null): EventFilter;

    ClearAccount(perpetualIndex: null, trader: null): EventFilter;

    CreatePerpetual(
      perpetualIndex: null,
      governor: null,
      shareToken: null,
      operator: null,
      oracle: null,
      collateral: null,
      coreParams: null,
      riskParams: null
    ): EventFilter;

    Deposit(perpetualIndex: null, trader: null, amount: null): EventFilter;

    DonateInsuranceFund(perpetualIndex: null, amount: null): EventFilter;

    IncreaseFee(recipient: null, amount: null): EventFilter;

    Liquidate(
      perpetualIndex: null,
      liquidator: string | null,
      trader: string | null,
      amount: null,
      price: null
    ): EventFilter;

    RemoveLiquidity(
      trader: null,
      returnedCash: null,
      burnedShare: null
    ): EventFilter;

    RunLiquidityPool(): EventFilter;

    SetClearedState(perpetualIndex: null): EventFilter;

    SetEmergencyState(
      perpetualIndex: null,
      settlementPrice: null,
      settlementTime: null
    ): EventFilter;

    SetLiquidityPoolParameter(key: null, value: null): EventFilter;

    SetNormalState(perpetualIndex: null): EventFilter;

    SetPerpetualParameter(
      perpetualIndex: null,
      key: null,
      value: null
    ): EventFilter;

    SetPerpetualRiskParameter(
      perpetualIndex: null,
      key: null,
      value: null,
      minValue: null,
      maxValue: null
    ): EventFilter;

    Settle(perpetualIndex: null, trader: null, amount: null): EventFilter;

    SettleAccount(
      perpetualIndex: null,
      trader: null,
      amount: null
    ): EventFilter;

    Trade(
      perpetualIndex: null,
      trader: string | null,
      position: null,
      price: null,
      fee: null
    ): EventFilter;

    UpdatePerpetualRiskParameter(
      perpetualIndex: null,
      key: null,
      value: null
    ): EventFilter;

    UpdatePoolMargin(poolMargin: null): EventFilter;

    UpdateUnitAccumulativeFunding(
      perpetualIndex: null,
      unitAccumulativeFunding: null
    ): EventFilter;

    Withdraw(perpetualIndex: null, trader: null, amount: null): EventFilter;
  };

  estimateGas: {
    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      signType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "brokerTrade(tuple,int256,bytes,uint8)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      signType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimFee(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimFee(address,int256)"(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimOperatingship(overrides?: Overrides): Promise<BigNumber>;

    "claimOperatingship()"(overrides?: Overrides): Promise<BigNumber>;

    clear(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "clear(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createPerpetual(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createPerpetual(address,int256[9],int256[5],int256[5],int256[5])"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "deposit(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    donateInsuranceFund(
      perpetualIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "donateInsuranceFund(uint256,int256)"(
      perpetualIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceToEnterEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "forceToEnterEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getClaimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClearProgress(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClearProgress(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityPoolInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPoolInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginAccount(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarginAccount(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPerpetualInfo(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getPerpetualInfo(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getSettleableMargin(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSettleableMargin(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      isFastCreationEnabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,bool)"(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      isFastCreationEnabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateByAMM(
      perpetualIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateByAMM(uint256,address,uint256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateByTrader(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateByTrader(uint256,address,int256,int256,uint256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeOperatingship(overrides?: Overrides): Promise<BigNumber>;

    "revokeOperatingship()"(overrides?: Overrides): Promise<BigNumber>;

    runLiquidityPool(overrides?: Overrides): Promise<BigNumber>;

    "runLiquidityPool()"(overrides?: Overrides): Promise<BigNumber>;

    setEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidityPoolParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidityPoolParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPerpetualBaseParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPerpetualBaseParameter(uint256,bytes32,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPerpetualRiskParameter(uint256,bytes32,int256,int256,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settle(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "settle(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trade(uint256,address,int256,int256,uint256,address,bool)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOperatingship(
      newOperator: string,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOperatingship(address,uint256)"(
      newOperator: string,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePerpetualRiskParameter(uint256,bytes32,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      signType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "brokerTrade(tuple,int256,bytes,uint8)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      amount: BigNumberish,
      signature: BytesLike,
      signType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimFee(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFee(address,int256)"(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimOperatingship(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimOperatingship()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    clear(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "clear(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createPerpetual(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createPerpetual(address,int256[9],int256[5],int256[5],int256[5])"(
      oracle: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    donateInsuranceFund(
      perpetualIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "donateInsuranceFund(uint256,int256)"(
      perpetualIndex: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceToEnterEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "forceToEnterEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getClaimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClearProgress(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClearProgress(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPoolInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityPoolInfo()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginAccount(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarginAccount(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPerpetualInfo(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getPerpetualInfo(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getSettleableMargin(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSettleableMargin(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      isFastCreationEnabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,bool)"(
      operator: string,
      collateral: string,
      governor: string,
      shareToken: string,
      isFastCreationEnabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateByAMM(
      perpetualIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateByAMM(uint256,address,uint256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateByTrader(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateByTrader(uint256,address,int256,int256,uint256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeOperatingship(overrides?: Overrides): Promise<PopulatedTransaction>;

    "revokeOperatingship()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    runLiquidityPool(overrides?: Overrides): Promise<PopulatedTransaction>;

    "runLiquidityPool()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setEmergencyState(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEmergencyState(uint256)"(
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidityPoolParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidityPoolParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPerpetualBaseParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPerpetualBaseParameter(uint256,bytes32,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPerpetualRiskParameter(uint256,bytes32,int256,int256,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settle(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(uint256,address)"(
      perpetualIndex: BigNumberish,
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trade(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trade(uint256,address,int256,int256,uint256,address,bool)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      limitPrice: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      isCloseOnly: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOperatingship(
      newOperator: string,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOperatingship(address,uint256)"(
      newOperator: string,
      expiration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePerpetualRiskParameter(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePerpetualRiskParameter(uint256,bytes32,int256)"(
      perpetualIndex: BigNumberish,
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256,address,int256)"(
      perpetualIndex: BigNumberish,
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
