/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BrokerRelayInterface extends ethers.utils.Interface {
  functions: {
    "SUPPORTED_MAX_ORDER_VERSION()": FunctionFragment;
    "SUPPORTED_MIN_ORDER_VERSION()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchTrade(tuple[],int256[],bytes[],uint256[])": FunctionFragment;
    "deposit()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SUPPORTED_MAX_ORDER_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUPPORTED_MIN_ORDER_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchTrade",
    values: [
      {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      BigNumberish[],
      BytesLike[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "SUPPORTED_MAX_ORDER_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUPPORTED_MIN_ORDER_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchTrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "TradeFailed(bytes32,tuple,int256)": EventFragment;
    "TradeSuccess(bytes32,tuple,int256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class BrokerRelay extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BrokerRelayInterface;

  functions: {
    SUPPORTED_MAX_ORDER_VERSION(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "SUPPORTED_MAX_ORDER_VERSION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    SUPPORTED_MIN_ORDER_VERSION(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "SUPPORTED_MIN_ORDER_VERSION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    balanceOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    batchTrade(
      orders: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      amounts: BigNumberish[],
      signatures: BytesLike[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchTrade(tuple[],int256[],bytes[],uint256[])"(
      orders: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      amounts: BigNumberish[],
      signatures: BytesLike[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  SUPPORTED_MAX_ORDER_VERSION(overrides?: CallOverrides): Promise<number>;

  "SUPPORTED_MAX_ORDER_VERSION()"(overrides?: CallOverrides): Promise<number>;

  SUPPORTED_MIN_ORDER_VERSION(overrides?: CallOverrides): Promise<number>;

  "SUPPORTED_MIN_ORDER_VERSION()"(overrides?: CallOverrides): Promise<number>;

  balanceOf(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchTrade(
    orders: {
      trader: string;
      broker: string;
      relayer: string;
      perpetual: string;
      referrer: string;
      amount: BigNumberish;
      priceLimit: BigNumberish;
      data: BytesLike;
      chainID: BigNumberish;
    }[],
    amounts: BigNumberish[],
    signatures: BytesLike[],
    gasRewards: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchTrade(tuple[],int256[],bytes[],uint256[])"(
    orders: {
      trader: string;
      broker: string;
      relayer: string;
      perpetual: string;
      referrer: string;
      amount: BigNumberish;
      priceLimit: BigNumberish;
      data: BytesLike;
      chainID: BigNumberish;
    }[],
    amounts: BigNumberish[],
    signatures: BytesLike[],
    gasRewards: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    SUPPORTED_MAX_ORDER_VERSION(overrides?: CallOverrides): Promise<number>;

    "SUPPORTED_MAX_ORDER_VERSION()"(overrides?: CallOverrides): Promise<number>;

    SUPPORTED_MIN_ORDER_VERSION(overrides?: CallOverrides): Promise<number>;

    "SUPPORTED_MIN_ORDER_VERSION()"(overrides?: CallOverrides): Promise<number>;

    balanceOf(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTrade(
      orders: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      amounts: BigNumberish[],
      signatures: BytesLike[],
      gasRewards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTrade(tuple[],int256[],bytes[],uint256[])"(
      orders: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      amounts: BigNumberish[],
      signatures: BytesLike[],
      gasRewards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    "deposit()"(overrides?: CallOverrides): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(trader: null, amount: null): EventFilter;

    TradeFailed(orderHash: null, order: null, amount: null): EventFilter;

    TradeSuccess(
      orderHash: null,
      order: null,
      amount: null,
      gasReward: null
    ): EventFilter;

    Transfer(sender: null, recipient: null, amount: null): EventFilter;

    Withdraw(trader: null, amount: null): EventFilter;
  };

  estimateGas: {
    SUPPORTED_MAX_ORDER_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "SUPPORTED_MAX_ORDER_VERSION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SUPPORTED_MIN_ORDER_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "SUPPORTED_MIN_ORDER_VERSION()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTrade(
      orders: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      amounts: BigNumberish[],
      signatures: BytesLike[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchTrade(tuple[],int256[],bytes[],uint256[])"(
      orders: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      amounts: BigNumberish[],
      signatures: BytesLike[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(overrides?: PayableOverrides): Promise<BigNumber>;

    "deposit()"(overrides?: PayableOverrides): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SUPPORTED_MAX_ORDER_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SUPPORTED_MAX_ORDER_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SUPPORTED_MIN_ORDER_VERSION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SUPPORTED_MIN_ORDER_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTrade(
      orders: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      amounts: BigNumberish[],
      signatures: BytesLike[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchTrade(tuple[],int256[],bytes[],uint256[])"(
      orders: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        data: BytesLike;
        chainID: BigNumberish;
      }[],
      amounts: BigNumberish[],
      signatures: BytesLike[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
