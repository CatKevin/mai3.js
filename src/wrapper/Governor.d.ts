/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernorInterface extends ethers.utils.Interface {
  functions: {
    "BALLOT_TYPEHASH()": FunctionFragment;
    "DELEGATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_TYPEHASH()": FunctionFragment;
    "_executeTransaction(string,bytes,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "checkpoints(address,uint256)": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "executingDelay()": FunctionFragment;
    "executingTimeout()": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getCurrentVotes(address)": FunctionFragment;
    "getPriorVotes(address,uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "latestProposalIds(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "numCheckpoints(address)": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposalRateThreshold()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "proposeCoreParameterUpdate(bytes32[],int256[])": FunctionFragment;
    "proposeLiquidityPoolUpgrade(address)": FunctionFragment;
    "proposeRiskParameterUpdate(bytes32[],int256[],int256[],int256[])": FunctionFragment;
    "quorumVoteRate()": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "redemptionLocks(address)": FunctionFragment;
    "shareToken()": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "target()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "votingDelay()": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BALLOT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DELEGATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_executeTransaction",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteBySig",
    values: [BigNumberish, boolean, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoints",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executingTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numCheckpoints",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalRateThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeCoreParameterUpdate",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeLiquidityPoolUpgrade",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeRiskParameterUpdate",
    values: [BytesLike[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumVoteRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redemptionLocks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shareToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BALLOT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DELEGATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executingTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalRateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeCoreParameterUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeLiquidityPoolUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeRiskParameterUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumVoteRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redemptionLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "ExecuteTransaction(bytes32,address,string,bytes,uint256)": EventFragment;
    "ProposalCreated(uint256,address,address,string,bytes[],uint256,uint256,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "VoteCast(address,uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
}

export class Governor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernorInterface;

  functions: {
    BALLOT_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DELEGATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    DOMAIN_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    _executeTransaction(
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "_executeTransaction(string,bytes,uint256)"(
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromBlock: BigNumber;
      votes: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "checkpoints(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromBlock: BigNumber;
      votes: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    delegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "delegates(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executingDelay(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "executingDelay()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    executingTimeout(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "executingTimeout()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      signatures: string;
      calldatas: string[];
      0: string;
      1: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      signatures: string;
      calldatas: string[];
      0: string;
      1: string[];
    }>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        support: boolean;
        votes: BigNumber;
        0: boolean;
        1: boolean;
        2: BigNumber;
      };
    }>;

    "initialize(address,address)"(
      _shareToken: string,
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _shareToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    numCheckpoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalRateThreshold(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalRateThreshold()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      signature: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      signature: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
    }>;

    proposeCoreParameterUpdate(
      keys: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeCoreParameterUpdate(bytes32[],int256[])"(
      keys: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposeLiquidityPoolUpgrade(
      targetImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeLiquidityPoolUpgrade(address)"(
      targetImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposeRiskParameterUpdate(
      keys: BytesLike[],
      values: BigNumberish[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeRiskParameterUpdate(bytes32[],int256[],int256[],int256[])"(
      keys: BytesLike[],
      values: BigNumberish[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    quorumVoteRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "quorumVoteRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redemptionLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "redemptionLocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    shareToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "shareToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    target(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "target()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    votingDelay(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "votingDelay()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    votingPeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "votingPeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  _executeTransaction(
    signature: string,
    data: BytesLike,
    eta: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "_executeTransaction(string,bytes,uint256)"(
    signature: string,
    data: BytesLike,
    eta: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVote(uint256,bool)"(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  castVoteBySig(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkpoints(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromBlock: BigNumber;
    votes: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "checkpoints(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    fromBlock: BigNumber;
    votes: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  delegate(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegate(address)"(
    delegatee: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

  "delegates(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "executingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  executingTimeout(overrides?: CallOverrides): Promise<BigNumber>;

  "executingTimeout()"(overrides?: CallOverrides): Promise<BigNumber>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    signatures: string;
    calldatas: string[];
    0: string;
    1: string[];
  }>;

  "getActions(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    signatures: string;
    calldatas: string[];
    0: string;
    1: string[];
  }>;

  getCurrentVotes(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCurrentVotes(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriorVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriorVotes(address,uint256)"(
    account: string,
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  "getReceipt(uint256,address)"(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  "initialize(address,address)"(
    _shareToken: string,
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _shareToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "latestProposalIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "numCheckpoints(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposalRateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalRateThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    signature: string;
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    signature: string;
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
  }>;

  proposeCoreParameterUpdate(
    keys: BytesLike[],
    values: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeCoreParameterUpdate(bytes32[],int256[])"(
    keys: BytesLike[],
    values: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposeLiquidityPoolUpgrade(
    targetImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeLiquidityPoolUpgrade(address)"(
    targetImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposeRiskParameterUpdate(
    keys: BytesLike[],
    values: BigNumberish[],
    minValues: BigNumberish[],
    maxValues: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeRiskParameterUpdate(bytes32[],int256[],int256[],int256[])"(
    keys: BytesLike[],
    values: BigNumberish[],
    minValues: BigNumberish[],
    maxValues: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  quorumVoteRate(overrides?: CallOverrides): Promise<BigNumber>;

  "quorumVoteRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  redeem(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeem(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redemptionLocks(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "redemptionLocks(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shareToken(overrides?: CallOverrides): Promise<string>;

  "shareToken()"(overrides?: CallOverrides): Promise<string>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  target(overrides?: CallOverrides): Promise<string>;

  "target()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    _executeTransaction(
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "_executeTransaction(string,bytes,uint256)"(
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromBlock: BigNumber;
      votes: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "checkpoints(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      fromBlock: BigNumber;
      votes: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    "delegate(address)"(
      delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<string>;

    "delegates(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "executingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    executingTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    "executingTimeout()"(overrides?: CallOverrides): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      signatures: string;
      calldatas: string[];
      0: string;
      1: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      signatures: string;
      calldatas: string[];
      0: string;
      1: string[];
    }>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    "initialize(address,address)"(
      _shareToken: string,
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _shareToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalRateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalRateThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      signature: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      signature: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
    }>;

    proposeCoreParameterUpdate(
      keys: BytesLike[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeCoreParameterUpdate(bytes32[],int256[])"(
      keys: BytesLike[],
      values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    proposeLiquidityPoolUpgrade(
      targetImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeLiquidityPoolUpgrade(address)"(
      targetImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proposeRiskParameterUpdate(
      keys: BytesLike[],
      values: BigNumberish[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeRiskParameterUpdate(bytes32[],int256[],int256[],int256[])"(
      keys: BytesLike[],
      values: BigNumberish[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    quorumVoteRate(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumVoteRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "redeem(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redemptionLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redemptionLocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<string>;

    "shareToken()"(overrides?: CallOverrides): Promise<string>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    target(overrides?: CallOverrides): Promise<string>;

    "target()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      amount: null
    ): EventFilter;

    DelegateChanged(
      delegator: string | null,
      fromDelegate: string | null,
      toDelegate: string | null
    ): EventFilter;

    DelegateVotesChanged(
      delegate: string | null,
      previousBalance: null,
      newBalance: null
    ): EventFilter;

    ExecuteTransaction(
      txHash: BytesLike | null,
      target: string | null,
      signature: null,
      data: null,
      eta: null
    ): EventFilter;

    ProposalCreated(
      id: null,
      proposer: null,
      target: null,
      signature: null,
      calldatas: null,
      startBlock: null,
      endBlock: null,
      description: null
    ): EventFilter;

    ProposalExecuted(id: null): EventFilter;

    Transfer(from: string | null, to: string | null, amount: null): EventFilter;

    VoteCast(
      voter: null,
      proposalId: null,
      support: null,
      votes: null
    ): EventFilter;
  };

  estimateGas: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "BALLOT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    DELEGATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DELEGATION_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    _executeTransaction(
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "_executeTransaction(string,bytes,uint256)"(
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkpoints(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegate(delegatee: string, overrides?: Overrides): Promise<BigNumber>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    delegates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "delegates(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "executingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    executingTimeout(overrides?: CallOverrides): Promise<BigNumber>;

    "executingTimeout()"(overrides?: CallOverrides): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _shareToken: string,
      _target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _shareToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numCheckpoints(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalRateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalRateThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposeCoreParameterUpdate(
      keys: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeCoreParameterUpdate(bytes32[],int256[])"(
      keys: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    proposeLiquidityPoolUpgrade(
      targetImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeLiquidityPoolUpgrade(address)"(
      targetImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proposeRiskParameterUpdate(
      keys: BytesLike[],
      values: BigNumberish[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeRiskParameterUpdate(bytes32[],int256[],int256[],int256[])"(
      keys: BytesLike[],
      values: BigNumberish[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    quorumVoteRate(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumVoteRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "redeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redemptionLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redemptionLocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shareToken(overrides?: CallOverrides): Promise<BigNumber>;

    "shareToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    "target()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "votingDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BALLOT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BALLOT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DELEGATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DELEGATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _executeTransaction(
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "_executeTransaction(string,bytes,uint256)"(
      signature: string,
      data: BytesLike,
      eta: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkpoints(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegate(address)"(
      delegatee: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    delegates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegates(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "executingDelay()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executingTimeout(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "executingTimeout()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _shareToken: string,
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _shareToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numCheckpoints(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalRateThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalRateThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposeCoreParameterUpdate(
      keys: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeCoreParameterUpdate(bytes32[],int256[])"(
      keys: BytesLike[],
      values: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposeLiquidityPoolUpgrade(
      targetImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeLiquidityPoolUpgrade(address)"(
      targetImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposeRiskParameterUpdate(
      keys: BytesLike[],
      values: BigNumberish[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeRiskParameterUpdate(bytes32[],int256[],int256[],int256[])"(
      keys: BytesLike[],
      values: BigNumberish[],
      minValues: BigNumberish[],
      maxValues: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    quorumVoteRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quorumVoteRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redemptionLocks(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "redemptionLocks(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shareToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "shareToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "target()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingDelay()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
