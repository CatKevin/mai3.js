/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BrokerInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "batchTrade(bytes[],int256[],uint256[])": FunctionFragment;
    "callFunction(bytes32,bytes32,string,bytes,bytes)": FunctionFragment;
    "cancelOrder(tuple)": FunctionFragment;
    "deposit()": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchTrade",
    values: [BytesLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "callFunction",
    values: [BytesLike, BytesLike, string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchTrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CallFunction(bytes32,bytes32,string,bytes,bytes)": EventFragment;
    "CancelOrder(bytes32)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "FillOrder(bytes32,int256)": EventFragment;
    "TradeFailed(bytes32,tuple,int256,string)": EventFragment;
    "TradeSuccess(bytes32,tuple,int256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallFunction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FillOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Broker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BrokerInterface;

  functions: {
    balanceOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    batchTrade(
      compressedOrders: BytesLike[],
      amounts: BigNumberish[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "batchTrade(bytes[],int256[],uint256[])"(
      compressedOrders: BytesLike[],
      amounts: BigNumberish[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    callFunction(
      userData1: BytesLike,
      userData2: BytesLike,
      functionSignature: string,
      callData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "callFunction(bytes32,bytes32,string,bytes,bytes)"(
      userData1: BytesLike,
      userData2: BytesLike,
      functionSignature: string,
      callData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelOrder(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOrder(tuple)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    getNonce(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      nonce: number;
      0: number;
    }>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      nonce: number;
      0: number;
    }>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchTrade(
    compressedOrders: BytesLike[],
    amounts: BigNumberish[],
    gasRewards: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "batchTrade(bytes[],int256[],uint256[])"(
    compressedOrders: BytesLike[],
    amounts: BigNumberish[],
    gasRewards: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callFunction(
    userData1: BytesLike,
    userData2: BytesLike,
    functionSignature: string,
    callData: BytesLike,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "callFunction(bytes32,bytes32,string,bytes,bytes)"(
    userData1: BytesLike,
    userData2: BytesLike,
    functionSignature: string,
    callData: BytesLike,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelOrder(
    order: {
      trader: string;
      broker: string;
      relayer: string;
      referrer: string;
      liquidityPool: string;
      minTradeAmount: BigNumberish;
      amount: BigNumberish;
      limitPrice: BigNumberish;
      triggerPrice: BigNumberish;
      chainID: BigNumberish;
      expiredAt: BigNumberish;
      perpetualIndex: BigNumberish;
      brokerFeeLimit: BigNumberish;
      flags: BigNumberish;
      salt: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOrder(tuple)"(
    order: {
      trader: string;
      broker: string;
      relayer: string;
      referrer: string;
      liquidityPool: string;
      minTradeAmount: BigNumberish;
      amount: BigNumberish;
      limitPrice: BigNumberish;
      triggerPrice: BigNumberish;
      chainID: BigNumberish;
      expiredAt: BigNumberish;
      perpetualIndex: BigNumberish;
      brokerFeeLimit: BigNumberish;
      flags: BigNumberish;
      salt: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "deposit()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  getNonce(account: string, overrides?: CallOverrides): Promise<number>;

  "getNonce(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<number>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTrade(
      compressedOrders: BytesLike[],
      amounts: BigNumberish[],
      gasRewards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTrade(bytes[],int256[],uint256[])"(
      compressedOrders: BytesLike[],
      amounts: BigNumberish[],
      gasRewards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    callFunction(
      userData1: BytesLike,
      userData2: BytesLike,
      functionSignature: string,
      callData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "callFunction(bytes32,bytes32,string,bytes,bytes)"(
      userData1: BytesLike,
      userData2: BytesLike,
      functionSignature: string,
      callData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder(tuple)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(overrides?: CallOverrides): Promise<void>;

    "deposit()"(overrides?: CallOverrides): Promise<void>;

    getNonce(account: string, overrides?: CallOverrides): Promise<number>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<number>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CallFunction(
      userData1: null,
      userData2: null,
      functionSignature: null,
      callData: null,
      signature: null
    ): EventFilter;

    CancelOrder(orderHash: null): EventFilter;

    Deposit(trader: string | null, amount: null): EventFilter;

    FillOrder(orderHash: null, fillAmount: null): EventFilter;

    TradeFailed(
      orderHash: null,
      order: null,
      amount: null,
      reason: null
    ): EventFilter;

    TradeSuccess(
      orderHash: null,
      order: null,
      amount: null,
      gasReward: null
    ): EventFilter;

    Transfer(
      sender: string | null,
      recipient: string | null,
      amount: null
    ): EventFilter;

    Withdraw(trader: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    balanceOf(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTrade(
      compressedOrders: BytesLike[],
      amounts: BigNumberish[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "batchTrade(bytes[],int256[],uint256[])"(
      compressedOrders: BytesLike[],
      amounts: BigNumberish[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    callFunction(
      userData1: BytesLike,
      userData2: BytesLike,
      functionSignature: string,
      callData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "callFunction(bytes32,bytes32,string,bytes,bytes)"(
      userData1: BytesLike,
      userData2: BytesLike,
      functionSignature: string,
      callData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelOrder(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOrder(tuple)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(overrides?: PayableOverrides): Promise<BigNumber>;

    "deposit()"(overrides?: PayableOverrides): Promise<BigNumber>;

    getNonce(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTrade(
      compressedOrders: BytesLike[],
      amounts: BigNumberish[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "batchTrade(bytes[],int256[],uint256[])"(
      compressedOrders: BytesLike[],
      amounts: BigNumberish[],
      gasRewards: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    callFunction(
      userData1: BytesLike,
      userData2: BytesLike,
      functionSignature: string,
      callData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "callFunction(bytes32,bytes32,string,bytes,bytes)"(
      userData1: BytesLike,
      userData2: BytesLike,
      functionSignature: string,
      callData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOrder(tuple)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        referrer: string;
        liquidityPool: string;
        minTradeAmount: BigNumberish;
        amount: BigNumberish;
        limitPrice: BigNumberish;
        triggerPrice: BigNumberish;
        chainID: BigNumberish;
        expiredAt: BigNumberish;
        perpetualIndex: BigNumberish;
        brokerFeeLimit: BigNumberish;
        flags: BigNumberish;
        salt: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "deposit()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    getNonce(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
