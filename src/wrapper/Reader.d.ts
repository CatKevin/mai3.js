/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ReaderInterface extends ethers.utils.Interface {
  functions: {
    "getAccountStorage(address,uint256,address)": FunctionFragment;
    "getLiquidityPoolStorage(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountStorage",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPoolStorage",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAccountStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPoolStorage",
    data: BytesLike
  ): Result;

  events: {};
}

export class Reader extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ReaderInterface;

  functions: {
    getAccountStorage(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      marginAccount: {
        cash: BigNumber;
        position: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      0: { cash: BigNumber; position: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    "getAccountStorage(address,uint256,address)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      marginAccount: {
        cash: BigNumber;
        position: BigNumber;
        0: BigNumber;
        1: BigNumber;
      };
      0: { cash: BigNumber; position: BigNumber; 0: BigNumber; 1: BigNumber };
    }>;

    getLiquidityPoolStorage(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getLiquidityPoolStorage(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAccountStorage(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    cash: BigNumber;
    position: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getAccountStorage(address,uint256,address)"(
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    cash: BigNumber;
    position: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getLiquidityPoolStorage(
    liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getLiquidityPoolStorage(address)"(
    liquidityPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAccountStorage(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getAccountStorage(address,uint256,address)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      cash: BigNumber;
      position: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getLiquidityPoolStorage(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      operator: string;
      collateralToken: string;
      vault: string;
      governor: string;
      shareToken: string;
      vaultFeeRate: BigNumber;
      poolCash: BigNumber;
      fundingTime: BigNumber;
      perpetualStorages: {
        symbol: BigNumber;
        underlyingAsset: string;
        state: number;
        oracle: string;
        markPrice: BigNumber;
        indexPrice: BigNumber;
        unitAccumulativeFunding: BigNumber;
        initialMarginRate: BigNumber;
        maintenanceMarginRate: BigNumber;
        operatorFeeRate: BigNumber;
        lpFeeRate: BigNumber;
        referrerRebateRate: BigNumber;
        liquidationPenaltyRate: BigNumber;
        keeperGasReward: BigNumber;
        insuranceFundRate: BigNumber;
        insuranceFundCap: BigNumber;
        insuranceFund: BigNumber;
        donatedInsuranceFund: BigNumber;
        halfSpread: BigNumber;
        openSlippageFactor: BigNumber;
        closeSlippageFactor: BigNumber;
        fundingRateLimit: BigNumber;
        ammMaxLeverage: BigNumber;
        ammCashBalance: BigNumber;
        ammPositionAmount: BigNumber;
        0: BigNumber;
        1: string;
        2: number;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: BigNumber;
        14: BigNumber;
        15: BigNumber;
        16: BigNumber;
        17: BigNumber;
        18: BigNumber;
        19: BigNumber;
        20: BigNumber;
        21: BigNumber;
        22: BigNumber;
        23: BigNumber;
        24: BigNumber;
      }[];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: {
        symbol: BigNumber;
        underlyingAsset: string;
        state: number;
        oracle: string;
        markPrice: BigNumber;
        indexPrice: BigNumber;
        unitAccumulativeFunding: BigNumber;
        initialMarginRate: BigNumber;
        maintenanceMarginRate: BigNumber;
        operatorFeeRate: BigNumber;
        lpFeeRate: BigNumber;
        referrerRebateRate: BigNumber;
        liquidationPenaltyRate: BigNumber;
        keeperGasReward: BigNumber;
        insuranceFundRate: BigNumber;
        insuranceFundCap: BigNumber;
        insuranceFund: BigNumber;
        donatedInsuranceFund: BigNumber;
        halfSpread: BigNumber;
        openSlippageFactor: BigNumber;
        closeSlippageFactor: BigNumber;
        fundingRateLimit: BigNumber;
        ammMaxLeverage: BigNumber;
        ammCashBalance: BigNumber;
        ammPositionAmount: BigNumber;
        0: BigNumber;
        1: string;
        2: number;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: BigNumber;
        14: BigNumber;
        15: BigNumber;
        16: BigNumber;
        17: BigNumber;
        18: BigNumber;
        19: BigNumber;
        20: BigNumber;
        21: BigNumber;
        22: BigNumber;
        23: BigNumber;
        24: BigNumber;
      }[];
    }>;

    "getLiquidityPoolStorage(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      operator: string;
      collateralToken: string;
      vault: string;
      governor: string;
      shareToken: string;
      vaultFeeRate: BigNumber;
      poolCash: BigNumber;
      fundingTime: BigNumber;
      perpetualStorages: {
        symbol: BigNumber;
        underlyingAsset: string;
        state: number;
        oracle: string;
        markPrice: BigNumber;
        indexPrice: BigNumber;
        unitAccumulativeFunding: BigNumber;
        initialMarginRate: BigNumber;
        maintenanceMarginRate: BigNumber;
        operatorFeeRate: BigNumber;
        lpFeeRate: BigNumber;
        referrerRebateRate: BigNumber;
        liquidationPenaltyRate: BigNumber;
        keeperGasReward: BigNumber;
        insuranceFundRate: BigNumber;
        insuranceFundCap: BigNumber;
        insuranceFund: BigNumber;
        donatedInsuranceFund: BigNumber;
        halfSpread: BigNumber;
        openSlippageFactor: BigNumber;
        closeSlippageFactor: BigNumber;
        fundingRateLimit: BigNumber;
        ammMaxLeverage: BigNumber;
        ammCashBalance: BigNumber;
        ammPositionAmount: BigNumber;
        0: BigNumber;
        1: string;
        2: number;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: BigNumber;
        14: BigNumber;
        15: BigNumber;
        16: BigNumber;
        17: BigNumber;
        18: BigNumber;
        19: BigNumber;
        20: BigNumber;
        21: BigNumber;
        22: BigNumber;
        23: BigNumber;
        24: BigNumber;
      }[];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: {
        symbol: BigNumber;
        underlyingAsset: string;
        state: number;
        oracle: string;
        markPrice: BigNumber;
        indexPrice: BigNumber;
        unitAccumulativeFunding: BigNumber;
        initialMarginRate: BigNumber;
        maintenanceMarginRate: BigNumber;
        operatorFeeRate: BigNumber;
        lpFeeRate: BigNumber;
        referrerRebateRate: BigNumber;
        liquidationPenaltyRate: BigNumber;
        keeperGasReward: BigNumber;
        insuranceFundRate: BigNumber;
        insuranceFundCap: BigNumber;
        insuranceFund: BigNumber;
        donatedInsuranceFund: BigNumber;
        halfSpread: BigNumber;
        openSlippageFactor: BigNumber;
        closeSlippageFactor: BigNumber;
        fundingRateLimit: BigNumber;
        ammMaxLeverage: BigNumber;
        ammCashBalance: BigNumber;
        ammPositionAmount: BigNumber;
        0: BigNumber;
        1: string;
        2: number;
        3: string;
        4: BigNumber;
        5: BigNumber;
        6: BigNumber;
        7: BigNumber;
        8: BigNumber;
        9: BigNumber;
        10: BigNumber;
        11: BigNumber;
        12: BigNumber;
        13: BigNumber;
        14: BigNumber;
        15: BigNumber;
        16: BigNumber;
        17: BigNumber;
        18: BigNumber;
        19: BigNumber;
        20: BigNumber;
        21: BigNumber;
        22: BigNumber;
        23: BigNumber;
        24: BigNumber;
      }[];
    }>;
  };

  filters: {};

  estimateGas: {
    getAccountStorage(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAccountStorage(address,uint256,address)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityPoolStorage(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getLiquidityPoolStorage(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountStorage(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccountStorage(address,uint256,address)"(
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPoolStorage(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityPoolStorage(address)"(
      liquidityPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
