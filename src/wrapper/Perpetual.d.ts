/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PerpetualInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidatity(int256)": FunctionFragment;
    "adjustRiskParameter(bytes32,int256)": FunctionFragment;
    "availableMargin(address)": FunctionFragment;
    "brokerTrade(tuple,int256)": FunctionFragment;
    "claimFee(address,int256)": FunctionFragment;
    "claimableFee(address)": FunctionFragment;
    "clear(address)": FunctionFragment;
    "deposit(address,int256)": FunctionFragment;
    "donateInsuranceFund(int256)": FunctionFragment;
    "fundingState()": FunctionFragment;
    "governor()": FunctionFragment;
    "grantPrivilege(address,address,uint256)": FunctionFragment;
    "infomation()": FunctionFragment;
    "initialize(address,address,address,address,int256[7],int256[5],int256[5],int256[5])": FunctionFragment;
    "isGranted(address,address,uint256)": FunctionFragment;
    "liquidateByAMM(address,uint256)": FunctionFragment;
    "liquidateByTrader(address,int256,int256,uint256)": FunctionFragment;
    "margin(address)": FunctionFragment;
    "marginAccount(address)": FunctionFragment;
    "removeLiquidatity(int256)": FunctionFragment;
    "revokePrivilege(address,address,uint256)": FunctionFragment;
    "settle(address)": FunctionFragment;
    "shutdown()": FunctionFragment;
    "state()": FunctionFragment;
    "trade(address,int256,int256,uint256,address)": FunctionFragment;
    "updateCoreParameter(bytes32,int256)": FunctionFragment;
    "updateRiskParameter(bytes32,int256,int256,int256)": FunctionFragment;
    "withdraw(address,int256)": FunctionFragment;
    "withdrawableMargin(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidatity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustRiskParameter",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "availableMargin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "brokerTrade",
    values: [
      {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "clear", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donateInsuranceFund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantPrivilege",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "infomation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranted",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByAMM",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateByTrader",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "margin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "marginAccount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidatity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePrivilege",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settle", values: [string]): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCoreParameter",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRiskParameter",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableMargin",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidatity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adjustRiskParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "brokerTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donateInsuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantPrivilege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "infomation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateByTrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "margin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marginAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidatity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePrivilege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCoreParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRiskParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableMargin",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidatity(address,int256,int256)": EventFragment;
    "AdjustRiskSetting(bytes32,int256)": EventFragment;
    "ClaimFee(address,int256)": EventFragment;
    "Clear(address)": EventFragment;
    "ClosePositionByLiquidation(address,int256,int256,int256)": EventFragment;
    "ClosePositionByTrade(address,int256,int256,int256)": EventFragment;
    "Deposit(address,int256)": EventFragment;
    "DonateInsuranceFund(address,int256)": EventFragment;
    "LiquidateByAMM(address,int256,int256,int256,uint256)": EventFragment;
    "LiquidateByTrader(address,address,int256,int256,uint256)": EventFragment;
    "OpenPositionByLiquidation(address,int256,int256)": EventFragment;
    "OpenPositionByTrade(address,int256,int256)": EventFragment;
    "RemoveLiquidatity(address,int256,int256)": EventFragment;
    "Trade(address,int256,int256,int256,uint256)": EventFragment;
    "UpdateCoreSetting(bytes32,int256)": EventFragment;
    "UpdateRiskSetting(bytes32,int256,int256,int256)": EventFragment;
    "Withdraw(address,int256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidatity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdjustRiskSetting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Clear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePositionByLiquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePositionByTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DonateInsuranceFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateByAMM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidateByTrader"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPositionByLiquidation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPositionByTrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidatity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCoreSetting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRiskSetting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Perpetual extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PerpetualInterface;

  functions: {
    addLiquidatity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addLiquidatity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adjustRiskParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adjustRiskParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    availableMargin(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "availableMargin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "brokerTrade(tuple,int256)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimFee(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimFee(address,int256)"(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "claimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    clear(trader: string, overrides?: Overrides): Promise<ContractTransaction>;

    "clear(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(address,int256)"(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fundingState(overrides?: Overrides): Promise<ContractTransaction>;

    "fundingState()"(overrides?: Overrides): Promise<ContractTransaction>;

    governor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    grantPrivilege(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantPrivilege(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    infomation(
      overrides?: CallOverrides
    ): Promise<{
      underlyingAsset: string;
      collateral: string;
      factory: string;
      oracle: string;
      operator: string;
      vault: string;
      coreParameter: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      riskParameter: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      7: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "infomation()"(
      overrides?: CallOverrides
    ): Promise<{
      underlyingAsset: string;
      collateral: string;
      factory: string;
      oracle: string;
      operator: string;
      vault: string;
      coreParameter: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      riskParameter: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      7: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    initialize(
      operator: string,
      oracle: string,
      governor: string,
      shareToken: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,address,int256[7],int256[5],int256[5],int256[5])"(
      operator: string,
      oracle: string,
      governor: string,
      shareToken: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isGranted(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isGranted(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    liquidateByAMM(
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateByAMM(address,uint256)"(
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidateByTrader(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidateByTrader(address,int256,int256,uint256)"(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    margin(trader: string, overrides?: Overrides): Promise<ContractTransaction>;

    "margin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marginAccount(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      positionAmount: BigNumber;
      cashBalance: BigNumber;
      entryFundingLoss: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "marginAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      positionAmount: BigNumber;
      cashBalance: BigNumber;
      entryFundingLoss: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    removeLiquidatity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeLiquidatity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokePrivilege(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokePrivilege(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settle(trader: string, overrides?: Overrides): Promise<ContractTransaction>;

    "settle(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shutdown(overrides?: Overrides): Promise<ContractTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

    state(overrides?: Overrides): Promise<ContractTransaction>;

    "state()"(overrides?: Overrides): Promise<ContractTransaction>;

    trade(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trade(address,int256,int256,uint256,address)"(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCoreParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCoreParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRiskParameter(
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRiskParameter(bytes32,int256,int256,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,int256)"(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawableMargin(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawableMargin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addLiquidatity(
    cashToAdd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addLiquidatity(int256)"(
    cashToAdd: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adjustRiskParameter(
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adjustRiskParameter(bytes32,int256)"(
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  availableMargin(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "availableMargin(address)"(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  brokerTrade(
    order: {
      trader: string;
      broker: string;
      relayer: string;
      perpetual: string;
      referrer: string;
      amount: BigNumberish;
      priceLimit: BigNumberish;
      deadline: BigNumberish;
      version: BigNumberish;
      orderType: BigNumberish;
      closeOnly: boolean;
      salt: BigNumberish;
      chainID: BigNumberish;
      signature: { config: BytesLike; r: BytesLike; s: BytesLike };
    },
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "brokerTrade(tuple,int256)"(
    order: {
      trader: string;
      broker: string;
      relayer: string;
      perpetual: string;
      referrer: string;
      amount: BigNumberish;
      priceLimit: BigNumberish;
      deadline: BigNumberish;
      version: BigNumberish;
      orderType: BigNumberish;
      closeOnly: boolean;
      salt: BigNumberish;
      chainID: BigNumberish;
      signature: { config: BytesLike; r: BytesLike; s: BytesLike };
    },
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimFee(
    claimer: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimFee(address,int256)"(
    claimer: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimableFee(claimer: string, overrides?: CallOverrides): Promise<BigNumber>;

  "claimableFee(address)"(
    claimer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  clear(trader: string, overrides?: Overrides): Promise<ContractTransaction>;

  "clear(address)"(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(address,int256)"(
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  donateInsuranceFund(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "donateInsuranceFund(int256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fundingState(overrides?: Overrides): Promise<ContractTransaction>;

  "fundingState()"(overrides?: Overrides): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  grantPrivilege(
    owner: string,
    trader: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantPrivilege(address,address,uint256)"(
    owner: string,
    trader: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  infomation(
    overrides?: CallOverrides
  ): Promise<{
    underlyingAsset: string;
    collateral: string;
    factory: string;
    oracle: string;
    operator: string;
    vault: string;
    coreParameter: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    riskParameter: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    7: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  }>;

  "infomation()"(
    overrides?: CallOverrides
  ): Promise<{
    underlyingAsset: string;
    collateral: string;
    factory: string;
    oracle: string;
    operator: string;
    vault: string;
    coreParameter: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    riskParameter: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ];
    7: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
  }>;

  initialize(
    operator: string,
    oracle: string,
    governor: string,
    shareToken: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,address,int256[7],int256[5],int256[5],int256[5])"(
    operator: string,
    oracle: string,
    governor: string,
    shareToken: string,
    coreParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    riskParams: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    minRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    maxRiskParamValues: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isGranted(
    owner: string,
    trader: string,
    privilege: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isGranted(address,address,uint256)"(
    owner: string,
    trader: string,
    privilege: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidateByAMM(
    trader: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateByAMM(address,uint256)"(
    trader: string,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidateByTrader(
    trader: string,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidateByTrader(address,int256,int256,uint256)"(
    trader: string,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  margin(trader: string, overrides?: Overrides): Promise<ContractTransaction>;

  "margin(address)"(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marginAccount(
    trader: string,
    overrides?: CallOverrides
  ): Promise<{
    positionAmount: BigNumber;
    cashBalance: BigNumber;
    entryFundingLoss: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "marginAccount(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<{
    positionAmount: BigNumber;
    cashBalance: BigNumber;
    entryFundingLoss: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  removeLiquidatity(
    shareToRemove: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeLiquidatity(int256)"(
    shareToRemove: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokePrivilege(
    owner: string,
    trader: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokePrivilege(address,address,uint256)"(
    owner: string,
    trader: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settle(trader: string, overrides?: Overrides): Promise<ContractTransaction>;

  "settle(address)"(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

  state(overrides?: Overrides): Promise<ContractTransaction>;

  "state()"(overrides?: Overrides): Promise<ContractTransaction>;

  trade(
    trader: string,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    deadline: BigNumberish,
    referrer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trade(address,int256,int256,uint256,address)"(
    trader: string,
    amount: BigNumberish,
    priceLimit: BigNumberish,
    deadline: BigNumberish,
    referrer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCoreParameter(
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCoreParameter(bytes32,int256)"(
    key: BytesLike,
    newValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRiskParameter(
    key: BytesLike,
    newValue: BigNumberish,
    minValue: BigNumberish,
    maxValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRiskParameter(bytes32,int256,int256,int256)"(
    key: BytesLike,
    newValue: BigNumberish,
    minValue: BigNumberish,
    maxValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,int256)"(
    trader: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawableMargin(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawableMargin(address)"(
    trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidatity(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addLiquidatity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adjustRiskParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "adjustRiskParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    availableMargin(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableMargin(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "brokerTrade(tuple,int256)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFee(
      claimer: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimFee(address,int256)"(
      claimer: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clear(trader: string, overrides?: CallOverrides): Promise<void>;

    "clear(address)"(trader: string, overrides?: CallOverrides): Promise<void>;

    deposit(
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(address,int256)"(
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fundingState(
      overrides?: CallOverrides
    ): Promise<{
      unitAccumulativeFunding: BigNumber;
      fundingRate: BigNumber;
      fundingTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "fundingState()"(
      overrides?: CallOverrides
    ): Promise<{
      unitAccumulativeFunding: BigNumber;
      fundingRate: BigNumber;
      fundingTime: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    grantPrivilege(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantPrivilege(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    infomation(
      overrides?: CallOverrides
    ): Promise<{
      underlyingAsset: string;
      collateral: string;
      factory: string;
      oracle: string;
      operator: string;
      vault: string;
      coreParameter: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      riskParameter: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      7: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    "infomation()"(
      overrides?: CallOverrides
    ): Promise<{
      underlyingAsset: string;
      collateral: string;
      factory: string;
      oracle: string;
      operator: string;
      vault: string;
      coreParameter: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      riskParameter: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ];
      7: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber];
    }>;

    initialize(
      operator: string,
      oracle: string,
      governor: string,
      shareToken: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,address,int256[7],int256[5],int256[5],int256[5])"(
      operator: string,
      oracle: string,
      governor: string,
      shareToken: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    isGranted(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isGranted(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidateByAMM(
      trader: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateByAMM(address,uint256)"(
      trader: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidateByTrader(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidateByTrader(address,int256,int256,uint256)"(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    margin(trader: string, overrides?: CallOverrides): Promise<BigNumber>;

    "margin(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marginAccount(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      positionAmount: BigNumber;
      cashBalance: BigNumber;
      entryFundingLoss: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "marginAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      positionAmount: BigNumber;
      cashBalance: BigNumber;
      entryFundingLoss: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    removeLiquidatity(
      shareToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeLiquidatity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePrivilege(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokePrivilege(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(trader: string, overrides?: CallOverrides): Promise<void>;

    "settle(address)"(trader: string, overrides?: CallOverrides): Promise<void>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    "shutdown()"(overrides?: CallOverrides): Promise<void>;

    state(
      overrides?: CallOverrides
    ): Promise<{
      isEmergency: boolean;
      isShuttingdown: boolean;
      insuranceFund: BigNumber;
      donatedInsuranceFund: BigNumber;
      markPrice: BigNumber;
      indexPrice: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "state()"(
      overrides?: CallOverrides
    ): Promise<{
      isEmergency: boolean;
      isShuttingdown: boolean;
      insuranceFund: BigNumber;
      donatedInsuranceFund: BigNumber;
      markPrice: BigNumber;
      indexPrice: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    trade(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "trade(address,int256,int256,uint256,address)"(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCoreParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCoreParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRiskParameter(
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateRiskParameter(bytes32,int256,int256,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,int256)"(
      trader: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableMargin(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawableMargin(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    AddLiquidatity(
      trader: null,
      addedCash: null,
      mintedShare: null
    ): EventFilter;

    AdjustRiskSetting(key: null, value: null): EventFilter;

    ClaimFee(claimer: null, amount: null): EventFilter;

    Clear(trader: null): EventFilter;

    ClosePositionByLiquidation(
      trader: null,
      amount: null,
      price: null,
      fundingLoss: null
    ): EventFilter;

    ClosePositionByTrade(
      trader: null,
      amount: null,
      price: null,
      fundingLoss: null
    ): EventFilter;

    Deposit(trader: null, amount: null): EventFilter;

    DonateInsuranceFund(trader: null, amount: null): EventFilter;

    LiquidateByAMM(
      trader: string | null,
      amount: null,
      price: null,
      fee: null,
      deadline: null
    ): EventFilter;

    LiquidateByTrader(
      liquidator: string | null,
      trader: string | null,
      amount: null,
      price: null,
      deadline: null
    ): EventFilter;

    OpenPositionByLiquidation(
      trader: null,
      amount: null,
      price: null
    ): EventFilter;

    OpenPositionByTrade(trader: null, amount: null, price: null): EventFilter;

    RemoveLiquidatity(
      trader: null,
      returnedCash: null,
      burnedShare: null
    ): EventFilter;

    Trade(
      trader: string | null,
      positionAmount: null,
      priceLimit: null,
      fee: null,
      deadline: null
    ): EventFilter;

    UpdateCoreSetting(key: null, value: null): EventFilter;

    UpdateRiskSetting(
      key: null,
      value: null,
      minValue: null,
      maxValue: null
    ): EventFilter;

    Withdraw(trader: null, amount: null): EventFilter;
  };

  estimateGas: {
    addLiquidatity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addLiquidatity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    adjustRiskParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "adjustRiskParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    availableMargin(trader: string, overrides?: Overrides): Promise<BigNumber>;

    "availableMargin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "brokerTrade(tuple,int256)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimFee(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claimFee(address,int256)"(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clear(trader: string, overrides?: Overrides): Promise<BigNumber>;

    "clear(address)"(trader: string, overrides?: Overrides): Promise<BigNumber>;

    deposit(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(address,int256)"(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fundingState(overrides?: Overrides): Promise<BigNumber>;

    "fundingState()"(overrides?: Overrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantPrivilege(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantPrivilege(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    infomation(overrides?: CallOverrides): Promise<BigNumber>;

    "infomation()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      operator: string,
      oracle: string,
      governor: string,
      shareToken: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,address,int256[7],int256[5],int256[5],int256[5])"(
      operator: string,
      oracle: string,
      governor: string,
      shareToken: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    isGranted(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGranted(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidateByAMM(
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateByAMM(address,uint256)"(
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidateByTrader(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidateByTrader(address,int256,int256,uint256)"(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    margin(trader: string, overrides?: Overrides): Promise<BigNumber>;

    "margin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    marginAccount(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marginAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidatity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeLiquidatity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokePrivilege(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokePrivilege(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settle(trader: string, overrides?: Overrides): Promise<BigNumber>;

    "settle(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shutdown(overrides?: Overrides): Promise<BigNumber>;

    "shutdown()"(overrides?: Overrides): Promise<BigNumber>;

    state(overrides?: Overrides): Promise<BigNumber>;

    "state()"(overrides?: Overrides): Promise<BigNumber>;

    trade(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trade(address,int256,int256,uint256,address)"(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateCoreParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCoreParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRiskParameter(
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRiskParameter(bytes32,int256,int256,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,int256)"(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawableMargin(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawableMargin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidatity(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addLiquidatity(int256)"(
      cashToAdd: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adjustRiskParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adjustRiskParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    availableMargin(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "availableMargin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    brokerTrade(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "brokerTrade(tuple,int256)"(
      order: {
        trader: string;
        broker: string;
        relayer: string;
        perpetual: string;
        referrer: string;
        amount: BigNumberish;
        priceLimit: BigNumberish;
        deadline: BigNumberish;
        version: BigNumberish;
        orderType: BigNumberish;
        closeOnly: boolean;
        salt: BigNumberish;
        chainID: BigNumberish;
        signature: { config: BytesLike; r: BytesLike; s: BytesLike };
      },
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimFee(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimFee(address,int256)"(
      claimer: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimableFee(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableFee(address)"(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clear(trader: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "clear(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(address,int256)"(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    donateInsuranceFund(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "donateInsuranceFund(int256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fundingState(overrides?: Overrides): Promise<PopulatedTransaction>;

    "fundingState()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantPrivilege(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantPrivilege(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    infomation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "infomation()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      operator: string,
      oracle: string,
      governor: string,
      shareToken: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,address,int256[7],int256[5],int256[5],int256[5])"(
      operator: string,
      oracle: string,
      governor: string,
      shareToken: string,
      coreParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      riskParams: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      minRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      maxRiskParamValues: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isGranted(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGranted(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidateByAMM(
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateByAMM(address,uint256)"(
      trader: string,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidateByTrader(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidateByTrader(address,int256,int256,uint256)"(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    margin(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "margin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marginAccount(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marginAccount(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidatity(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeLiquidatity(int256)"(
      shareToRemove: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokePrivilege(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokePrivilege(address,address,uint256)"(
      owner: string,
      trader: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settle(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shutdown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    state(overrides?: Overrides): Promise<PopulatedTransaction>;

    "state()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    trade(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trade(address,int256,int256,uint256,address)"(
      trader: string,
      amount: BigNumberish,
      priceLimit: BigNumberish,
      deadline: BigNumberish,
      referrer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateCoreParameter(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCoreParameter(bytes32,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRiskParameter(
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRiskParameter(bytes32,int256,int256,int256)"(
      key: BytesLike,
      newValue: BigNumberish,
      minValue: BigNumberish,
      maxValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,int256)"(
      trader: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawableMargin(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawableMargin(address)"(
      trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
