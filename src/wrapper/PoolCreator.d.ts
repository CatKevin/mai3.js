/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoolCreatorInterface extends ethers.utils.Interface {
  functions: {
    "accessController()": FunctionFragment;
    "activateLiquidityPoolFor(address,uint256)": FunctionFragment;
    "addVersion(address,uint256,string)": FunctionFragment;
    "createLiquidityPool(address,uint256,bool,int256)": FunctionFragment;
    "createLiquidityPoolWith(address,address,uint256,bool,int256)": FunctionFragment;
    "deactivateLiquidityPoolFor(address,uint256)": FunctionFragment;
    "getActiveLiquidityPoolCountOf(address)": FunctionFragment;
    "getDescription(address)": FunctionFragment;
    "getLatestVersion()": FunctionFragment;
    "getLiquidityPoolCount()": FunctionFragment;
    "getOwnedLiquidityPoolsCountOf(address)": FunctionFragment;
    "grantPrivilege(address,uint256)": FunctionFragment;
    "isActiveLiquidityPoolOf(address,address,uint256)": FunctionFragment;
    "isGranted(address,address,uint256)": FunctionFragment;
    "isLiquidityPool(address)": FunctionFragment;
    "isVersionCompatibleWith(address,address)": FunctionFragment;
    "isVersionValid(address)": FunctionFragment;
    "listActiveLiquidityPoolsOf(address,uint256,uint256)": FunctionFragment;
    "listLiquidityPoolOwnedBy(address,uint256,uint256)": FunctionFragment;
    "listLiquidityPools(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokePrivilege(address,uint256)": FunctionFragment;
    "setLiquidityPoolOwnership(address,address)": FunctionFragment;
    "symbolService()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "vaultFeeRate()": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateLiquidityPoolFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addVersion",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidityPool",
    values: [string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidityPoolWith",
    values: [string, string, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateLiquidityPoolFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveLiquidityPoolCountOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDescription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityPoolCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnedLiquidityPoolsCountOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPrivilege",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveLiquidityPoolOf",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGranted",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidityPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVersionCompatibleWith",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isVersionValid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "listActiveLiquidityPoolsOf",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listLiquidityPoolOwnedBy",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listLiquidityPools",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokePrivilege",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPoolOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "symbolService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vaultFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "accessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateLiquidityPoolFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidityPoolWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateLiquidityPoolFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveLiquidityPoolCountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityPoolCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnedLiquidityPoolsCountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPrivilege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveLiquidityPoolOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isGranted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVersionCompatibleWith",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVersionValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listActiveLiquidityPoolsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listLiquidityPoolOwnedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listLiquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePrivilege",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPoolOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "symbolService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vaultFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "AddVersion(address)": EventFragment;
    "CreateLiquidityPool(address,address,address,address,address,uint256,bool)": EventFragment;
    "GrantPrivilege(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RevokePrivilege(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddVersion"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateLiquidityPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantPrivilege"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokePrivilege"): EventFragment;
}

export class PoolCreator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolCreatorInterface;

  functions: {
    accessController(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "accessController()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    activateLiquidityPoolFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "activateLiquidityPoolFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    addVersion(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addVersion(address,uint256,string)"(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createLiquidityPool(
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createLiquidityPool(address,uint256,bool,int256)"(
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createLiquidityPoolWith(
      implementation: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createLiquidityPoolWith(address,address,uint256,bool,int256)"(
      implementation: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deactivateLiquidityPoolFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deactivateLiquidityPoolFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getActiveLiquidityPoolCountOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getActiveLiquidityPoolCountOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getDescription(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      creationTime: BigNumber;
      compatibility: BigNumber;
      note: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "getDescription(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      creationTime: BigNumber;
      compatibility: BigNumber;
      note: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    getLatestVersion(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getLatestVersion()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getLiquidityPoolCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getLiquidityPoolCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getOwnedLiquidityPoolsCountOf(
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getOwnedLiquidityPoolsCountOf(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    grantPrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantPrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isActiveLiquidityPoolOf(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isActiveLiquidityPoolOf(address,address,uint256)"(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isGranted(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isGranted(address,address,uint256)"(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isLiquidityPool(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isLiquidityPool(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isVersionCompatibleWith(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isVersionCompatibleWith(address,address)"(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isVersionValid(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isVersionValid(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    listActiveLiquidityPoolsOf(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[];
      0: {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[];
    }>;

    "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[];
      0: {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[];
    }>;

    listLiquidityPoolOwnedBy(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    listLiquidityPools(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    "listLiquidityPools(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      result: string[];
      0: string[];
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    revokePrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokePrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidityPoolOwnership(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidityPoolOwnership(address,address)"(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    symbolService(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbolService()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vault(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "vault()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    vaultFeeRate(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "vaultFeeRate()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    weth(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "weth()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  accessController(overrides?: CallOverrides): Promise<string>;

  "accessController()"(overrides?: CallOverrides): Promise<string>;

  activateLiquidityPoolFor(
    trader: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "activateLiquidityPoolFor(address,uint256)"(
    trader: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  addVersion(
    implementation: string,
    compatibility: BigNumberish,
    note: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addVersion(address,uint256,string)"(
    implementation: string,
    compatibility: BigNumberish,
    note: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createLiquidityPool(
    collateral: string,
    collateralDecimals: BigNumberish,
    isFastCreationEnabled: boolean,
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createLiquidityPool(address,uint256,bool,int256)"(
    collateral: string,
    collateralDecimals: BigNumberish,
    isFastCreationEnabled: boolean,
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createLiquidityPoolWith(
    implementation: string,
    collateral: string,
    collateralDecimals: BigNumberish,
    isFastCreationEnabled: boolean,
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createLiquidityPoolWith(address,address,uint256,bool,int256)"(
    implementation: string,
    collateral: string,
    collateralDecimals: BigNumberish,
    isFastCreationEnabled: boolean,
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deactivateLiquidityPoolFor(
    trader: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deactivateLiquidityPoolFor(address,uint256)"(
    trader: string,
    perpetualIndex: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getActiveLiquidityPoolCountOf(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getActiveLiquidityPoolCountOf(address)"(
    trader: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDescription(
    implementation: string,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    creationTime: BigNumber;
    compatibility: BigNumber;
    note: string;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  "getDescription(address)"(
    implementation: string,
    overrides?: CallOverrides
  ): Promise<{
    creator: string;
    creationTime: BigNumber;
    compatibility: BigNumber;
    note: string;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  getLatestVersion(overrides?: CallOverrides): Promise<string>;

  "getLatestVersion()"(overrides?: CallOverrides): Promise<string>;

  getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getOwnedLiquidityPoolsCountOf(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOwnedLiquidityPoolsCountOf(address)"(
    operator: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantPrivilege(
    grantee: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantPrivilege(address,uint256)"(
    grantee: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isActiveLiquidityPoolOf(
    trader: string,
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isActiveLiquidityPoolOf(address,address,uint256)"(
    trader: string,
    liquidityPool: string,
    perpetualIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGranted(
    grantor: string,
    grantee: string,
    privilege: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isGranted(address,address,uint256)"(
    grantor: string,
    grantee: string,
    privilege: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLiquidityPool(
    liquidityPool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isLiquidityPool(address)"(
    liquidityPool: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVersionCompatibleWith(
    base: string,
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isVersionCompatibleWith(address,address)"(
    base: string,
    target: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVersionValid(
    implementation: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isVersionValid(address)"(
    implementation: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listActiveLiquidityPoolsOf(
    trader: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      liquidityPool: string;
      perpetualIndex: BigNumber;
      0: string;
      1: BigNumber;
    }[]
  >;

  "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
    trader: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    {
      liquidityPool: string;
      perpetualIndex: BigNumber;
      0: string;
      1: BigNumber;
    }[]
  >;

  listLiquidityPoolOwnedBy(
    operator: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
    operator: string,
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  listLiquidityPools(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "listLiquidityPools(uint256,uint256)"(
    begin: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  revokePrivilege(
    grantee: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokePrivilege(address,uint256)"(
    grantee: string,
    privilege: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidityPoolOwnership(
    liquidityPool: string,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidityPoolOwnership(address,address)"(
    liquidityPool: string,
    operator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  symbolService(overrides?: CallOverrides): Promise<string>;

  "symbolService()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  "vault()"(overrides?: CallOverrides): Promise<string>;

  vaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "vaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accessController(overrides?: CallOverrides): Promise<string>;

    "accessController()"(overrides?: CallOverrides): Promise<string>;

    activateLiquidityPoolFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "activateLiquidityPoolFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addVersion(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addVersion(address,uint256,string)"(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createLiquidityPool(
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createLiquidityPool(address,uint256,bool,int256)"(
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createLiquidityPoolWith(
      implementation: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createLiquidityPoolWith(address,address,uint256,bool,int256)"(
      implementation: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deactivateLiquidityPoolFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deactivateLiquidityPoolFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getActiveLiquidityPoolCountOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActiveLiquidityPoolCountOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDescription(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      creationTime: BigNumber;
      compatibility: BigNumber;
      note: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "getDescription(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<{
      creator: string;
      creationTime: BigNumber;
      compatibility: BigNumber;
      note: string;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    getLatestVersion(overrides?: CallOverrides): Promise<string>;

    "getLatestVersion()"(overrides?: CallOverrides): Promise<string>;

    getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnedLiquidityPoolsCountOf(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwnedLiquidityPoolsCountOf(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantPrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantPrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isActiveLiquidityPoolOf(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isActiveLiquidityPoolOf(address,address,uint256)"(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGranted(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isGranted(address,address,uint256)"(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLiquidityPool(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isLiquidityPool(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVersionCompatibleWith(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isVersionCompatibleWith(address,address)"(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVersionValid(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isVersionValid(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listActiveLiquidityPoolsOf(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[]
    >;

    "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      {
        liquidityPool: string;
        perpetualIndex: BigNumber;
        0: string;
        1: BigNumber;
      }[]
    >;

    listLiquidityPoolOwnedBy(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    listLiquidityPools(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "listLiquidityPools(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    revokePrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokePrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPoolOwnership(
      liquidityPool: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidityPoolOwnership(address,address)"(
      liquidityPool: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbolService(overrides?: CallOverrides): Promise<string>;

    "symbolService()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    "vault()"(overrides?: CallOverrides): Promise<string>;

    vaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    AddVersion(implementation: null): EventFilter;

    CreateLiquidityPool(
      liquidityPool: null,
      governor: null,
      shareToken: null,
      operator: null,
      collateral: null,
      collateralDecimals: null,
      isFastCreationEnabled: null
    ): EventFilter;

    GrantPrivilege(
      grantor: string | null,
      grantee: string | null,
      privilege: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RevokePrivilege(
      grantor: string | null,
      grantee: string | null,
      privilege: null
    ): EventFilter;
  };

  estimateGas: {
    accessController(overrides?: CallOverrides): Promise<BigNumber>;

    "accessController()"(overrides?: CallOverrides): Promise<BigNumber>;

    activateLiquidityPoolFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "activateLiquidityPoolFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    addVersion(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addVersion(address,uint256,string)"(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createLiquidityPool(
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createLiquidityPool(address,uint256,bool,int256)"(
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createLiquidityPoolWith(
      implementation: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createLiquidityPoolWith(address,address,uint256,bool,int256)"(
      implementation: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deactivateLiquidityPoolFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deactivateLiquidityPoolFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getActiveLiquidityPoolCountOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActiveLiquidityPoolCountOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDescription(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDescription(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "getLatestVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidityPoolCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityPoolCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnedLiquidityPoolsCountOf(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwnedLiquidityPoolsCountOf(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantPrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantPrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isActiveLiquidityPoolOf(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isActiveLiquidityPoolOf(address,address,uint256)"(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGranted(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGranted(address,address,uint256)"(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidityPool(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isLiquidityPool(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVersionCompatibleWith(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isVersionCompatibleWith(address,address)"(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVersionValid(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isVersionValid(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listActiveLiquidityPoolsOf(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listLiquidityPoolOwnedBy(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listLiquidityPools(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "listLiquidityPools(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    revokePrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokePrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidityPoolOwnership(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidityPoolOwnership(address,address)"(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    symbolService(overrides?: CallOverrides): Promise<BigNumber>;

    "symbolService()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    "vault()"(overrides?: CallOverrides): Promise<BigNumber>;

    vaultFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "vaultFeeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "accessController()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activateLiquidityPoolFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "activateLiquidityPoolFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    addVersion(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addVersion(address,uint256,string)"(
      implementation: string,
      compatibility: BigNumberish,
      note: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createLiquidityPool(
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createLiquidityPool(address,uint256,bool,int256)"(
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createLiquidityPoolWith(
      implementation: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createLiquidityPoolWith(address,address,uint256,bool,int256)"(
      implementation: string,
      collateral: string,
      collateralDecimals: BigNumberish,
      isFastCreationEnabled: boolean,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deactivateLiquidityPoolFor(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deactivateLiquidityPoolFor(address,uint256)"(
      trader: string,
      perpetualIndex: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getActiveLiquidityPoolCountOf(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActiveLiquidityPoolCountOf(address)"(
      trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDescription(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDescription(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLatestVersion()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityPoolCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityPoolCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnedLiquidityPoolsCountOf(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwnedLiquidityPoolsCountOf(address)"(
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantPrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantPrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isActiveLiquidityPoolOf(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isActiveLiquidityPoolOf(address,address,uint256)"(
      trader: string,
      liquidityPool: string,
      perpetualIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGranted(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGranted(address,address,uint256)"(
      grantor: string,
      grantee: string,
      privilege: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidityPool(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isLiquidityPool(address)"(
      liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVersionCompatibleWith(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVersionCompatibleWith(address,address)"(
      base: string,
      target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVersionValid(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isVersionValid(address)"(
      implementation: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listActiveLiquidityPoolsOf(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listActiveLiquidityPoolsOf(address,uint256,uint256)"(
      trader: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listLiquidityPoolOwnedBy(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listLiquidityPoolOwnedBy(address,uint256,uint256)"(
      operator: string,
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listLiquidityPools(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "listLiquidityPools(uint256,uint256)"(
      begin: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revokePrivilege(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokePrivilege(address,uint256)"(
      grantee: string,
      privilege: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidityPoolOwnership(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidityPoolOwnership(address,address)"(
      liquidityPool: string,
      operator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    symbolService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbolService()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vault()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vaultFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vaultFeeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
